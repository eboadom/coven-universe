// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Player entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Player entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Player", id.toString(), this);
  }

  static load(id: string): Player | null {
    return store.get("Player", id) as Player | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wizards(): Array<string> {
    let value = this.get("wizards");
    return value.toStringArray();
  }

  set wizards(value: Array<string>) {
    this.set("wizards", Value.fromStringArray(value));
  }
}

export class WizardCowvenReputation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save WizardCowvenReputation entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WizardCowvenReputation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WizardCowvenReputation", id.toString(), this);
  }

  static load(id: string): WizardCowvenReputation | null {
    return store.get(
      "WizardCowvenReputation",
      id
    ) as WizardCowvenReputation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wizardWallet(): string | null {
    let value = this.get("wizardWallet");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wizardWallet(value: string | null) {
    if (value === null) {
      this.unset("wizardWallet");
    } else {
      this.set("wizardWallet", Value.fromString(value as string));
    }
  }

  get reputation(): string {
    let value = this.get("reputation");
    return value.toString();
  }

  set reputation(value: string) {
    this.set("reputation", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class WizardWallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WizardWallet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WizardWallet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WizardWallet", id.toString(), this);
  }

  static load(id: string): WizardWallet | null {
    return store.get("WizardWallet", id) as WizardWallet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wizard(): string {
    let value = this.get("wizard");
    return value.toString();
  }

  set wizard(value: string) {
    this.set("wizard", Value.fromString(value));
  }

  get proposals(): Array<string> {
    let value = this.get("proposals");
    return value.toStringArray();
  }

  set proposals(value: Array<string>) {
    this.set("proposals", Value.fromStringArray(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }

  get reputation(): Array<string> {
    let value = this.get("reputation");
    return value.toStringArray();
  }

  set reputation(value: Array<string>) {
    this.set("reputation", Value.fromStringArray(value));
  }
}

export class Wizard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Wizard entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Wizard entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Wizard", id.toString(), this);
  }

  static load(id: string): Wizard | null {
    return store.get("Wizard", id) as Wizard | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get affinity(): i32 {
    let value = this.get("affinity");
    return value.toI32();
  }

  set affinity(value: i32) {
    this.set("affinity", Value.fromI32(value));
  }

  get innatePower(): BigInt {
    let value = this.get("innatePower");
    return value.toBigInt();
  }

  set innatePower(value: BigInt) {
    this.set("innatePower", Value.fromBigInt(value));
  }

  get player(): string {
    let value = this.get("player");
    return value.toString();
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get wallet(): string {
    let value = this.get("wallet");
    return value.toString();
  }

  set wallet(value: string) {
    this.set("wallet", Value.fromString(value));
  }

  get wins(): i32 {
    let value = this.get("wins");
    return value.toI32();
  }

  set wins(value: i32) {
    this.set("wins", Value.fromI32(value));
  }

  get loses(): i32 {
    let value = this.get("loses");
    return value.toI32();
  }

  set loses(value: i32) {
    this.set("loses", Value.fromI32(value));
  }
}

export class Reputation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reputation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reputation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reputation", id.toString(), this);
  }

  static load(id: string): Reputation | null {
    return store.get("Reputation", id) as Reputation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cowven(): string {
    let value = this.get("cowven");
    return value.toString();
  }

  set cowven(value: string) {
    this.set("cowven", Value.fromString(value));
  }

  get totalReputationSupply(): BigInt {
    let value = this.get("totalReputationSupply");
    return value.toBigInt();
  }

  set totalReputationSupply(value: BigInt) {
    this.set("totalReputationSupply", Value.fromBigInt(value));
  }

  get wallets(): Array<string> {
    let value = this.get("wallets");
    return value.toStringArray();
  }

  set wallets(value: Array<string>) {
    this.set("wallets", Value.fromStringArray(value));
  }
}

export class Cowven extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Cowven entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Cowven entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Cowven", id.toString(), this);
  }

  static load(id: string): Cowven | null {
    return store.get("Cowven", id) as Cowven | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get grate(): string {
    let value = this.get("grate");
    return value.toString();
  }

  set grate(value: string) {
    this.set("grate", Value.fromString(value));
  }

  get reputationAddress(): Bytes {
    let value = this.get("reputationAddress");
    return value.toBytes();
  }

  set reputationAddress(value: Bytes) {
    this.set("reputationAddress", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get reputationAddress(): string {
    let value = this.get("reputationAddress");
    return value.toString();
  }

  set reputationAddress(value: string) {
    this.set("reputationAddress", Value.fromString(value));
  }

  get createdAtTimestamp(): i32 {
    let value = this.get("createdAtTimestamp");
    return value.toI32();
  }

  set createdAtTimestamp(value: i32) {
    this.set("createdAtTimestamp", Value.fromI32(value));
  }

  get createdAtBlock(): BigInt {
    let value = this.get("createdAtBlock");
    return value.toBigInt();
  }

  set createdAtBlock(value: BigInt) {
    this.set("createdAtBlock", Value.fromBigInt(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get ethBalance(): BigDecimal {
    let value = this.get("ethBalance");
    return value.toBigDecimal();
  }

  set ethBalance(value: BigDecimal) {
    this.set("ethBalance", Value.fromBigDecimal(value));
  }

  get reputation(): string {
    let value = this.get("reputation");
    return value.toString();
  }

  set reputation(value: string) {
    this.set("reputation", Value.fromString(value));
  }

  get proposals(): Array<string> {
    let value = this.get("proposals");
    return value.toStringArray();
  }

  set proposals(value: Array<string>) {
    this.set("proposals", Value.fromStringArray(value));
  }

  get wins(): i32 {
    let value = this.get("wins");
    return value.toI32();
  }

  set wins(value: i32) {
    this.set("wins", Value.fromI32(value));
  }

  get loses(): i32 {
    let value = this.get("loses");
    return value.toI32();
  }

  set loses(value: i32) {
    this.set("loses", Value.fromI32(value));
  }
}

export class ProposalVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProposalVote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalVote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalVote", id.toString(), this);
  }

  static load(id: string): ProposalVote | null {
    return store.get("ProposalVote", id) as ProposalVote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get wizardWallet(): string {
    let value = this.get("wizardWallet");
    return value.toString();
  }

  set wizardWallet(value: string) {
    this.set("wizardWallet", Value.fromString(value));
  }

  get reputation(): BigInt {
    let value = this.get("reputation");
    return value.toBigInt();
  }

  set reputation(value: BigInt) {
    this.set("reputation", Value.fromBigInt(value));
  }

  get agreed(): boolean {
    let value = this.get("agreed");
    return value.toBoolean();
  }

  set agreed(value: boolean) {
    this.set("agreed", Value.fromBoolean(value));
  }

  get createdAtTimestamp(): i32 {
    let value = this.get("createdAtTimestamp");
    return value.toI32();
  }

  set createdAtTimestamp(value: i32) {
    this.set("createdAtTimestamp", Value.fromI32(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get isSuccessed(): boolean {
    let value = this.get("isSuccessed");
    return value.toBoolean();
  }

  set isSuccessed(value: boolean) {
    this.set("isSuccessed", Value.fromBoolean(value));
  }

  get isRedeemed(): boolean {
    let value = this.get("isRedeemed");
    return value.toBoolean();
  }

  set isRedeemed(value: boolean) {
    this.set("isRedeemed", Value.fromBoolean(value));
  }

  get cowven(): string {
    let value = this.get("cowven");
    return value.toString();
  }

  set cowven(value: string) {
    this.set("cowven", Value.fromString(value));
  }

  get beneficiary(): string {
    let value = this.get("beneficiary");
    return value.toString();
  }

  set beneficiary(value: string) {
    this.set("beneficiary", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get reputationChange(): BigInt {
    let value = this.get("reputationChange");
    return value.toBigInt();
  }

  set reputationChange(value: BigInt) {
    this.set("reputationChange", Value.fromBigInt(value));
  }

  get votesPro(): BigInt {
    let value = this.get("votesPro");
    return value.toBigInt();
  }

  set votesPro(value: BigInt) {
    this.set("votesPro", Value.fromBigInt(value));
  }

  get votesContra(): BigInt {
    let value = this.get("votesContra");
    return value.toBigInt();
  }

  set votesContra(value: BigInt) {
    this.set("votesContra", Value.fromBigInt(value));
  }

  get reputationPro(): BigInt {
    let value = this.get("reputationPro");
    return value.toBigInt();
  }

  set reputationPro(value: BigInt) {
    this.set("reputationPro", Value.fromBigInt(value));
  }

  get reputationContra(): BigInt {
    let value = this.get("reputationContra");
    return value.toBigInt();
  }

  set reputationContra(value: BigInt) {
    this.set("reputationContra", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): i32 {
    let value = this.get("createdAtTimestamp");
    return value.toI32();
  }

  set createdAtTimestamp(value: i32) {
    this.set("createdAtTimestamp", Value.fromI32(value));
  }

  get createdAtBlock(): BigInt {
    let value = this.get("createdAtBlock");
    return value.toBigInt();
  }

  set createdAtBlock(value: BigInt) {
    this.set("createdAtBlock", Value.fromBigInt(value));
  }

  get executedAtTimestamp(): i32 {
    let value = this.get("executedAtTimestamp");
    return value.toI32();
  }

  set executedAtTimestamp(value: i32) {
    this.set("executedAtTimestamp", Value.fromI32(value));
  }

  get executedAtBlock(): BigInt | null {
    let value = this.get("executedAtBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedAtBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("executedAtBlock");
    } else {
      this.set("executedAtBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }
}

export class DaoCreator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DaoCreator entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DaoCreator entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DaoCreator", id.toString(), this);
  }

  static load(id: string): DaoCreator | null {
    return store.get("DaoCreator", id) as DaoCreator | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cowvens(): Array<string> {
    let value = this.get("cowvens");
    return value.toStringArray();
  }

  set cowvens(value: Array<string>) {
    this.set("cowvens", Value.fromStringArray(value));
  }
}
