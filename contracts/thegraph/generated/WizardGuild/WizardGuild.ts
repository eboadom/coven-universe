// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class SeriesOpen extends EthereumEvent {
  get params(): SeriesOpen__Params {
    return new SeriesOpen__Params(this);
  }
}

export class SeriesOpen__Params {
  _event: SeriesOpen;

  constructor(event: SeriesOpen) {
    this._event = event;
  }

  get seriesIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reservedIds(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SeriesClose extends EthereumEvent {
  get params(): SeriesClose__Params {
    return new SeriesClose__Params(this);
  }
}

export class SeriesClose__Params {
  _event: SeriesClose;

  constructor(event: SeriesClose) {
    this._event = event;
  }

  get seriesIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MetadataSet extends EthereumEvent {
  get params(): MetadataSet__Params {
    return new MetadataSet__Params(this);
  }
}

export class MetadataSet__Params {
  _event: MetadataSet;

  constructor(event: MetadataSet) {
    this._event = event;
  }

  get wizardId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get metadata(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get wizardId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get wizardId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends EthereumEvent {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class WizardConjured extends EthereumEvent {
  get params(): WizardConjured__Params {
    return new WizardConjured__Params(this);
  }
}

export class WizardConjured__Params {
  _event: WizardConjured;

  constructor(event: WizardConjured) {
    this._event = event;
  }

  get wizardId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get affinity(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get innatePower(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WizardAffinityAssigned extends EthereumEvent {
  get params(): WizardAffinityAssigned__Params {
    return new WizardAffinityAssigned__Params(this);
  }
}

export class WizardAffinityAssigned__Params {
  _event: WizardAffinityAssigned;

  constructor(event: WizardAffinityAssigned) {
    this._event = event;
  }

  get wizardId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get affinity(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class CEOTransferred extends EthereumEvent {
  get params(): CEOTransferred__Params {
    return new CEOTransferred__Params(this);
  }
}

export class CEOTransferred__Params {
  _event: CEOTransferred;

  constructor(event: CEOTransferred) {
    this._event = event;
  }

  get previousCeo(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCeo(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class COOTransferred extends EthereumEvent {
  get params(): COOTransferred__Params {
    return new COOTransferred__Params(this);
  }
}

export class COOTransferred__Params {
  _event: COOTransferred;

  constructor(event: COOTransferred) {
    this._event = event;
  }

  get previousCoo(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCoo(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CFOTransferred extends EthereumEvent {
  get params(): CFOTransferred__Params {
    return new CFOTransferred__Params(this);
  }
}

export class CFOTransferred__Params {
  _event: CFOTransferred;

  constructor(event: CFOTransferred) {
    this._event = event;
  }

  get previousCfo(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCfo(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WizardGuild__wizardsByIdResult {
  value0: i32;
  value1: BigInt;
  value2: Address;
  value3: Bytes;

  constructor(value0: i32, value1: BigInt, value2: Address, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromI32(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromFixedBytes(this.value3));
    return map;
  }
}

export class WizardGuild__getWizardResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: Bytes;

  constructor(value0: Address, value1: BigInt, value2: i32, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromI32(this.value2));
    map.set("value3", EthereumValue.fromFixedBytes(this.value3));
    return map;
  }
}

export class WizardGuild extends SmartContract {
  static bind(address: Address): WizardGuild {
    return new WizardGuild("WizardGuild", address);
  }

  cfoAddress(): Address {
    let result = super.call("cfoAddress", []);

    return result[0].toAddress();
  }

  try_cfoAddress(): CallResult<Address> {
    let result = super.tryCall("cfoAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getApproved(wizardId: BigInt): Address {
    let result = super.call("getApproved", [
      EthereumValue.fromUnsignedBigInt(wizardId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(wizardId: BigInt): CallResult<Address> {
    let result = super.tryCall("getApproved", [
      EthereumValue.fromUnsignedBigInt(wizardId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  ceoAddress(): Address {
    let result = super.call("ceoAddress", []);

    return result[0].toAddress();
  }

  try_ceoAddress(): CallResult<Address> {
    let result = super.tryCall("ceoAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  wizardsById(param0: BigInt): WizardGuild__wizardsByIdResult {
    let result = super.call("wizardsById", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new WizardGuild__wizardsByIdResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBytes()
    );
  }

  try_wizardsById(param0: BigInt): CallResult<WizardGuild__wizardsByIdResult> {
    let result = super.tryCall("wizardsById", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new WizardGuild__wizardsByIdResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBytes()
      )
    );
  }

  ownerOf(wizardId: BigInt): Address {
    let result = super.call("ownerOf", [
      EthereumValue.fromUnsignedBigInt(wizardId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(wizardId: BigInt): CallResult<Address> {
    let result = super.tryCall("ownerOf", [
      EthereumValue.fromUnsignedBigInt(wizardId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(owner)]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [EthereumValue.fromAddress(owner)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  cooAddress(): Address {
    let result = super.call("cooAddress", []);

    return result[0].toAddress();
  }

  try_cooAddress(): CallResult<Address> {
    let result = super.tryCall("cooAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call("isApprovedForAll", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(operator)
    ]);

    return result[0].toBoolean();
  }

  try_isApprovedForAll(owner: Address, operator: Address): CallResult<boolean> {
    let result = super.tryCall("isApprovedForAll", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(operator)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getNextWizardIndex(): BigInt {
    let result = super.call("getNextWizardIndex", []);

    return result[0].toBigInt();
  }

  try_getNextWizardIndex(): CallResult<BigInt> {
    let result = super.tryCall("getNextWizardIndex", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  openSeries(minter: Address, reservedIds: BigInt): BigInt {
    let result = super.call("openSeries", [
      EthereumValue.fromAddress(minter),
      EthereumValue.fromUnsignedBigInt(reservedIds)
    ]);

    return result[0].toBigInt();
  }

  try_openSeries(minter: Address, reservedIds: BigInt): CallResult<BigInt> {
    let result = super.tryCall("openSeries", [
      EthereumValue.fromAddress(minter),
      EthereumValue.fromUnsignedBigInt(reservedIds)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): CallResult<boolean> {
    let result = super.tryCall("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getWizard(id: BigInt): WizardGuild__getWizardResult {
    let result = super.call("getWizard", [
      EthereumValue.fromUnsignedBigInt(id)
    ]);

    return new WizardGuild__getWizardResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBytes()
    );
  }

  try_getWizard(id: BigInt): CallResult<WizardGuild__getWizardResult> {
    let result = super.tryCall("getWizard", [
      EthereumValue.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new WizardGuild__getWizardResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBytes()
      )
    );
  }

  mintWizards(
    powers: Array<BigInt>,
    affinities: Array<i32>,
    owner: Address
  ): Array<BigInt> {
    let result = super.call("mintWizards", [
      EthereumValue.fromUnsignedBigIntArray(powers),
      EthereumValue.fromI32Array(affinities),
      EthereumValue.fromAddress(owner)
    ]);

    return result[0].toBigIntArray();
  }

  try_mintWizards(
    powers: Array<BigInt>,
    affinities: Array<i32>,
    owner: Address
  ): CallResult<Array<BigInt>> {
    let result = super.tryCall("mintWizards", [
      EthereumValue.fromUnsignedBigIntArray(powers),
      EthereumValue.fromI32Array(affinities),
      EthereumValue.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedOrOwner(spender: Address, tokenId: BigInt): boolean {
    let result = super.call("isApprovedOrOwner", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isApprovedOrOwner(
    spender: Address,
    tokenId: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("isApprovedOrOwner", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get wizardId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get wizardId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class SetCfoCall extends EthereumCall {
  get inputs(): SetCfoCall__Inputs {
    return new SetCfoCall__Inputs(this);
  }

  get outputs(): SetCfoCall__Outputs {
    return new SetCfoCall__Outputs(this);
  }
}

export class SetCfoCall__Inputs {
  _call: SetCfoCall;

  constructor(call: SetCfoCall) {
    this._call = call;
  }

  get newCfo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCfoCall__Outputs {
  _call: SetCfoCall;

  constructor(call: SetCfoCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends EthereumCall {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get wizardId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetCeoCall extends EthereumCall {
  get inputs(): SetCeoCall__Inputs {
    return new SetCeoCall__Inputs(this);
  }

  get outputs(): SetCeoCall__Outputs {
    return new SetCeoCall__Outputs(this);
  }
}

export class SetCeoCall__Inputs {
  _call: SetCeoCall;

  constructor(call: SetCeoCall) {
    this._call = call;
  }

  get newCeo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCeoCall__Outputs {
  _call: SetCeoCall;

  constructor(call: SetCeoCall) {
    this._call = call;
  }
}

export class SetCooCall extends EthereumCall {
  get inputs(): SetCooCall__Inputs {
    return new SetCooCall__Inputs(this);
  }

  get outputs(): SetCooCall__Outputs {
    return new SetCooCall__Outputs(this);
  }
}

export class SetCooCall__Inputs {
  _call: SetCooCall;

  constructor(call: SetCooCall) {
    this._call = call;
  }

  get newCoo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCooCall__Outputs {
  _call: SetCooCall;

  constructor(call: SetCooCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends EthereumCall {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends EthereumCall {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get wizardId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OpenSeriesCall extends EthereumCall {
  get inputs(): OpenSeriesCall__Inputs {
    return new OpenSeriesCall__Inputs(this);
  }

  get outputs(): OpenSeriesCall__Outputs {
    return new OpenSeriesCall__Outputs(this);
  }
}

export class OpenSeriesCall__Inputs {
  _call: OpenSeriesCall;

  constructor(call: OpenSeriesCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reservedIds(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OpenSeriesCall__Outputs {
  _call: OpenSeriesCall;

  constructor(call: OpenSeriesCall) {
    this._call = call;
  }

  get seriesId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CloseSeriesCall extends EthereumCall {
  get inputs(): CloseSeriesCall__Inputs {
    return new CloseSeriesCall__Inputs(this);
  }

  get outputs(): CloseSeriesCall__Outputs {
    return new CloseSeriesCall__Outputs(this);
  }
}

export class CloseSeriesCall__Inputs {
  _call: CloseSeriesCall;

  constructor(call: CloseSeriesCall) {
    this._call = call;
  }
}

export class CloseSeriesCall__Outputs {
  _call: CloseSeriesCall;

  constructor(call: CloseSeriesCall) {
    this._call = call;
  }
}

export class MintWizardsCall extends EthereumCall {
  get inputs(): MintWizardsCall__Inputs {
    return new MintWizardsCall__Inputs(this);
  }

  get outputs(): MintWizardsCall__Outputs {
    return new MintWizardsCall__Outputs(this);
  }
}

export class MintWizardsCall__Inputs {
  _call: MintWizardsCall;

  constructor(call: MintWizardsCall) {
    this._call = call;
  }

  get powers(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get affinities(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintWizardsCall__Outputs {
  _call: MintWizardsCall;

  constructor(call: MintWizardsCall) {
    this._call = call;
  }

  get wizardIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class MintReservedWizardsCall extends EthereumCall {
  get inputs(): MintReservedWizardsCall__Inputs {
    return new MintReservedWizardsCall__Inputs(this);
  }

  get outputs(): MintReservedWizardsCall__Outputs {
    return new MintReservedWizardsCall__Outputs(this);
  }
}

export class MintReservedWizardsCall__Inputs {
  _call: MintReservedWizardsCall;

  constructor(call: MintReservedWizardsCall) {
    this._call = call;
  }

  get wizardIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get powers(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get affinities(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class MintReservedWizardsCall__Outputs {
  _call: MintReservedWizardsCall;

  constructor(call: MintReservedWizardsCall) {
    this._call = call;
  }
}

export class SetMetadataCall extends EthereumCall {
  get inputs(): SetMetadataCall__Inputs {
    return new SetMetadataCall__Inputs(this);
  }

  get outputs(): SetMetadataCall__Outputs {
    return new SetMetadataCall__Outputs(this);
  }
}

export class SetMetadataCall__Inputs {
  _call: SetMetadataCall;

  constructor(call: SetMetadataCall) {
    this._call = call;
  }

  get wizardIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get metadata(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class SetMetadataCall__Outputs {
  _call: SetMetadataCall;

  constructor(call: SetMetadataCall) {
    this._call = call;
  }
}

export class SetAffinityCall extends EthereumCall {
  get inputs(): SetAffinityCall__Inputs {
    return new SetAffinityCall__Inputs(this);
  }

  get outputs(): SetAffinityCall__Outputs {
    return new SetAffinityCall__Outputs(this);
  }
}

export class SetAffinityCall__Inputs {
  _call: SetAffinityCall;

  constructor(call: SetAffinityCall) {
    this._call = call;
  }

  get wizardId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAffinity(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetAffinityCall__Outputs {
  _call: SetAffinityCall;

  constructor(call: SetAffinityCall) {
    this._call = call;
  }
}
