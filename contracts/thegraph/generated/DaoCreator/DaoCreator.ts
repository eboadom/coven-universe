// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class NewOrg extends EthereumEvent {
  get params(): NewOrg__Params {
    return new NewOrg__Params(this);
  }
}

export class NewOrg__Params {
  _event: NewOrg;

  constructor(event: NewOrg) {
    this._event = event;
  }

  get _avatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class InitialSchemesSet extends EthereumEvent {
  get params(): InitialSchemesSet__Params {
    return new InitialSchemesSet__Params(this);
  }
}

export class InitialSchemesSet__Params {
  _event: InitialSchemesSet;

  constructor(event: InitialSchemesSet) {
    this._event = event;
  }

  get _avatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DaoCreator extends SmartContract {
  static bind(address: Address): DaoCreator {
    return new DaoCreator("DaoCreator", address);
  }

  locks(param0: Address): Address {
    let result = super.call("locks", [EthereumValue.fromAddress(param0)]);

    return result[0].toAddress();
  }

  try_locks(param0: Address): CallResult<Address> {
    let result = super.tryCall("locks", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  addFounders(
    _avatar: Address,
    _founders: Array<Address>,
    _foundersTokenAmount: Array<BigInt>,
    _foundersReputationAmount: Array<BigInt>
  ): boolean {
    let result = super.call("addFounders", [
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromAddressArray(_founders),
      EthereumValue.fromUnsignedBigIntArray(_foundersTokenAmount),
      EthereumValue.fromUnsignedBigIntArray(_foundersReputationAmount)
    ]);

    return result[0].toBoolean();
  }

  try_addFounders(
    _avatar: Address,
    _founders: Array<Address>,
    _foundersTokenAmount: Array<BigInt>,
    _foundersReputationAmount: Array<BigInt>
  ): CallResult<boolean> {
    let result = super.tryCall("addFounders", [
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromAddressArray(_founders),
      EthereumValue.fromUnsignedBigIntArray(_foundersTokenAmount),
      EthereumValue.fromUnsignedBigIntArray(_foundersReputationAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  forgeOrg(
    _orgName: string,
    _tokenName: string,
    _tokenSymbol: string,
    _founders: Array<Address>,
    _foundersTokenAmount: Array<BigInt>,
    _foundersReputationAmount: Array<BigInt>,
    _uController: Address,
    _cap: BigInt
  ): Address {
    let result = super.call("forgeOrg", [
      EthereumValue.fromString(_orgName),
      EthereumValue.fromString(_tokenName),
      EthereumValue.fromString(_tokenSymbol),
      EthereumValue.fromAddressArray(_founders),
      EthereumValue.fromUnsignedBigIntArray(_foundersTokenAmount),
      EthereumValue.fromUnsignedBigIntArray(_foundersReputationAmount),
      EthereumValue.fromAddress(_uController),
      EthereumValue.fromUnsignedBigInt(_cap)
    ]);

    return result[0].toAddress();
  }

  try_forgeOrg(
    _orgName: string,
    _tokenName: string,
    _tokenSymbol: string,
    _founders: Array<Address>,
    _foundersTokenAmount: Array<BigInt>,
    _foundersReputationAmount: Array<BigInt>,
    _uController: Address,
    _cap: BigInt
  ): CallResult<Address> {
    let result = super.tryCall("forgeOrg", [
      EthereumValue.fromString(_orgName),
      EthereumValue.fromString(_tokenName),
      EthereumValue.fromString(_tokenSymbol),
      EthereumValue.fromAddressArray(_founders),
      EthereumValue.fromUnsignedBigIntArray(_foundersTokenAmount),
      EthereumValue.fromUnsignedBigIntArray(_foundersReputationAmount),
      EthereumValue.fromAddress(_uController),
      EthereumValue.fromUnsignedBigInt(_cap)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controllerCreator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddFoundersCall extends EthereumCall {
  get inputs(): AddFoundersCall__Inputs {
    return new AddFoundersCall__Inputs(this);
  }

  get outputs(): AddFoundersCall__Outputs {
    return new AddFoundersCall__Outputs(this);
  }
}

export class AddFoundersCall__Inputs {
  _call: AddFoundersCall;

  constructor(call: AddFoundersCall) {
    this._call = call;
  }

  get _avatar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _founders(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _foundersTokenAmount(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _foundersReputationAmount(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class AddFoundersCall__Outputs {
  _call: AddFoundersCall;

  constructor(call: AddFoundersCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ForgeOrgCall extends EthereumCall {
  get inputs(): ForgeOrgCall__Inputs {
    return new ForgeOrgCall__Inputs(this);
  }

  get outputs(): ForgeOrgCall__Outputs {
    return new ForgeOrgCall__Outputs(this);
  }
}

export class ForgeOrgCall__Inputs {
  _call: ForgeOrgCall;

  constructor(call: ForgeOrgCall) {
    this._call = call;
  }

  get _orgName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tokenName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _tokenSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _founders(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _foundersTokenAmount(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _foundersReputationAmount(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get _uController(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _cap(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ForgeOrgCall__Outputs {
  _call: ForgeOrgCall;

  constructor(call: ForgeOrgCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetSchemesCall extends EthereumCall {
  get inputs(): SetSchemesCall__Inputs {
    return new SetSchemesCall__Inputs(this);
  }

  get outputs(): SetSchemesCall__Outputs {
    return new SetSchemesCall__Outputs(this);
  }
}

export class SetSchemesCall__Inputs {
  _call: SetSchemesCall;

  constructor(call: SetSchemesCall) {
    this._call = call;
  }

  get _avatar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _schemes(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _params(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get _permissions(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get _metaData(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class SetSchemesCall__Outputs {
  _call: SetSchemesCall;

  constructor(call: SetSchemesCall) {
    this._call = call;
  }
}
