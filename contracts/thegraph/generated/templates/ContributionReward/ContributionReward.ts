// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class NewContributionProposal extends EthereumEvent {
  get params(): NewContributionProposal__Params {
    return new NewContributionProposal__Params(this);
  }
}

export class NewContributionProposal__Params {
  _event: NewContributionProposal;

  constructor(event: NewContributionProposal) {
    this._event = event;
  }

  get _avatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _proposalId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _intVoteInterface(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _descriptionHash(): string {
    return this._event.parameters[3].value.toString();
  }

  get _reputationChange(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _rewards(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }

  get _externalToken(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class ProposalExecuted extends EthereumEvent {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get _avatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _proposalId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _param(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RedeemReputation extends EthereumEvent {
  get params(): RedeemReputation__Params {
    return new RedeemReputation__Params(this);
  }
}

export class RedeemReputation__Params {
  _event: RedeemReputation;

  constructor(event: RedeemReputation) {
    this._event = event;
  }

  get _avatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _proposalId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _beneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RedeemEther extends EthereumEvent {
  get params(): RedeemEther__Params {
    return new RedeemEther__Params(this);
  }
}

export class RedeemEther__Params {
  _event: RedeemEther;

  constructor(event: RedeemEther) {
    this._event = event;
  }

  get _avatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _proposalId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _beneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RedeemNativeToken extends EthereumEvent {
  get params(): RedeemNativeToken__Params {
    return new RedeemNativeToken__Params(this);
  }
}

export class RedeemNativeToken__Params {
  _event: RedeemNativeToken;

  constructor(event: RedeemNativeToken) {
    this._event = event;
  }

  get _avatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _proposalId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _beneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RedeemExternalToken extends EthereumEvent {
  get params(): RedeemExternalToken__Params {
    return new RedeemExternalToken__Params(this);
  }
}

export class RedeemExternalToken__Params {
  _event: RedeemExternalToken;

  constructor(event: RedeemExternalToken) {
    this._event = event;
  }

  get _avatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _proposalId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _beneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ContributionReward__parametersResult {
  value0: Bytes;
  value1: Address;

  constructor(value0: Bytes, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromFixedBytes(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    return map;
  }
}

export class ContributionReward__organizationsProposalsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromSignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromAddress(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    map.set("value8", EthereumValue.fromUnsignedBigInt(this.value8));
    return map;
  }
}

export class ContributionReward__proposalsInfoResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    return map;
  }
}

export class ContributionReward__redeemResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromSignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ContributionReward extends SmartContract {
  static bind(address: Address): ContributionReward {
    return new ContributionReward("ContributionReward", address);
  }

  parameters(param0: Bytes): ContributionReward__parametersResult {
    let result = super.call("parameters", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return new ContributionReward__parametersResult(
      result[0].toBytes(),
      result[1].toAddress()
    );
  }

  try_parameters(
    param0: Bytes
  ): CallResult<ContributionReward__parametersResult> {
    let result = super.tryCall("parameters", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ContributionReward__parametersResult(
        value[0].toBytes(),
        value[1].toAddress()
      )
    );
  }

  organizationsProposals(
    param0: Address,
    param1: Bytes
  ): ContributionReward__organizationsProposalsResult {
    let result = super.call("organizationsProposals", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromFixedBytes(param1)
    ]);

    return new ContributionReward__organizationsProposalsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_organizationsProposals(
    param0: Address,
    param1: Bytes
  ): CallResult<ContributionReward__organizationsProposalsResult> {
    let result = super.tryCall("organizationsProposals", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromFixedBytes(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ContributionReward__organizationsProposalsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  proposalsInfo(
    param0: Address,
    param1: Bytes
  ): ContributionReward__proposalsInfoResult {
    let result = super.call("proposalsInfo", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromFixedBytes(param1)
    ]);

    return new ContributionReward__proposalsInfoResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_proposalsInfo(
    param0: Address,
    param1: Bytes
  ): CallResult<ContributionReward__proposalsInfoResult> {
    let result = super.tryCall("proposalsInfo", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromFixedBytes(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ContributionReward__proposalsInfoResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  balanceOfStakingToken(_stakingToken: Address, _proposalId: Bytes): BigInt {
    let result = super.call("balanceOfStakingToken", [
      EthereumValue.fromAddress(_stakingToken),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOfStakingToken(
    _stakingToken: Address,
    _proposalId: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("balanceOfStakingToken", [
      EthereumValue.fromAddress(_stakingToken),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  reputationOf(_owner: Address, _proposalId: Bytes): BigInt {
    let result = super.call("reputationOf", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBigInt();
  }

  try_reputationOf(_owner: Address, _proposalId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("reputationOf", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTotalReputationSupply(_proposalId: Bytes): BigInt {
    let result = super.call("getTotalReputationSupply", [
      EthereumValue.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBigInt();
  }

  try_getTotalReputationSupply(_proposalId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getTotalReputationSupply", [
      EthereumValue.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  stakingTokenTransfer(
    _stakingToken: Address,
    _beneficiary: Address,
    _amount: BigInt,
    _proposalId: Bytes
  ): boolean {
    let result = super.call("stakingTokenTransfer", [
      EthereumValue.fromAddress(_stakingToken),
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_stakingTokenTransfer(
    _stakingToken: Address,
    _beneficiary: Address,
    _amount: BigInt,
    _proposalId: Bytes
  ): CallResult<boolean> {
    let result = super.tryCall("stakingTokenTransfer", [
      EthereumValue.fromAddress(_stakingToken),
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  mintReputation(
    _amount: BigInt,
    _beneficiary: Address,
    _proposalId: Bytes
  ): boolean {
    let result = super.call("mintReputation", [
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_mintReputation(
    _amount: BigInt,
    _beneficiary: Address,
    _proposalId: Bytes
  ): CallResult<boolean> {
    let result = super.tryCall("mintReputation", [
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  burnReputation(
    _amount: BigInt,
    _beneficiary: Address,
    _proposalId: Bytes
  ): boolean {
    let result = super.call("burnReputation", [
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_burnReputation(
    _amount: BigInt,
    _beneficiary: Address,
    _proposalId: Bytes
  ): CallResult<boolean> {
    let result = super.tryCall("burnReputation", [
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  executeProposal(_proposalId: Bytes, _param: BigInt): boolean {
    let result = super.call("executeProposal", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromSignedBigInt(_param)
    ]);

    return result[0].toBoolean();
  }

  try_executeProposal(_proposalId: Bytes, _param: BigInt): CallResult<boolean> {
    let result = super.tryCall("executeProposal", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromSignedBigInt(_param)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  setParameters(_voteApproveParams: Bytes, _intVote: Address): Bytes {
    let result = super.call("setParameters", [
      EthereumValue.fromFixedBytes(_voteApproveParams),
      EthereumValue.fromAddress(_intVote)
    ]);

    return result[0].toBytes();
  }

  try_setParameters(
    _voteApproveParams: Bytes,
    _intVote: Address
  ): CallResult<Bytes> {
    let result = super.tryCall("setParameters", [
      EthereumValue.fromFixedBytes(_voteApproveParams),
      EthereumValue.fromAddress(_intVote)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getParametersHash(_voteApproveParams: Bytes, _intVote: Address): Bytes {
    let result = super.call("getParametersHash", [
      EthereumValue.fromFixedBytes(_voteApproveParams),
      EthereumValue.fromAddress(_intVote)
    ]);

    return result[0].toBytes();
  }

  try_getParametersHash(
    _voteApproveParams: Bytes,
    _intVote: Address
  ): CallResult<Bytes> {
    let result = super.tryCall("getParametersHash", [
      EthereumValue.fromFixedBytes(_voteApproveParams),
      EthereumValue.fromAddress(_intVote)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  proposeContributionReward(
    _avatar: Address,
    _descriptionHash: string,
    _reputationChange: BigInt,
    _rewards: Array<BigInt>,
    _externalToken: Address,
    _beneficiary: Address
  ): Bytes {
    let result = super.call("proposeContributionReward", [
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromString(_descriptionHash),
      EthereumValue.fromSignedBigInt(_reputationChange),
      EthereumValue.fromUnsignedBigIntArray(_rewards),
      EthereumValue.fromAddress(_externalToken),
      EthereumValue.fromAddress(_beneficiary)
    ]);

    return result[0].toBytes();
  }

  try_proposeContributionReward(
    _avatar: Address,
    _descriptionHash: string,
    _reputationChange: BigInt,
    _rewards: Array<BigInt>,
    _externalToken: Address,
    _beneficiary: Address
  ): CallResult<Bytes> {
    let result = super.tryCall("proposeContributionReward", [
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromString(_descriptionHash),
      EthereumValue.fromSignedBigInt(_reputationChange),
      EthereumValue.fromUnsignedBigIntArray(_rewards),
      EthereumValue.fromAddress(_externalToken),
      EthereumValue.fromAddress(_beneficiary)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  redeemReputation(_proposalId: Bytes, _avatar: Address): BigInt {
    let result = super.call("redeemReputation", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);

    return result[0].toBigInt();
  }

  try_redeemReputation(
    _proposalId: Bytes,
    _avatar: Address
  ): CallResult<BigInt> {
    let result = super.tryCall("redeemReputation", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeemNativeToken(_proposalId: Bytes, _avatar: Address): BigInt {
    let result = super.call("redeemNativeToken", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);

    return result[0].toBigInt();
  }

  try_redeemNativeToken(
    _proposalId: Bytes,
    _avatar: Address
  ): CallResult<BigInt> {
    let result = super.tryCall("redeemNativeToken", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeemEther(_proposalId: Bytes, _avatar: Address): BigInt {
    let result = super.call("redeemEther", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);

    return result[0].toBigInt();
  }

  try_redeemEther(_proposalId: Bytes, _avatar: Address): CallResult<BigInt> {
    let result = super.tryCall("redeemEther", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeemExternalToken(_proposalId: Bytes, _avatar: Address): BigInt {
    let result = super.call("redeemExternalToken", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);

    return result[0].toBigInt();
  }

  try_redeemExternalToken(
    _proposalId: Bytes,
    _avatar: Address
  ): CallResult<BigInt> {
    let result = super.tryCall("redeemExternalToken", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeem(
    _proposalId: Bytes,
    _avatar: Address,
    _whatToRedeem: Array<boolean>
  ): ContributionReward__redeemResult {
    let result = super.call("redeem", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromBooleanArray(_whatToRedeem)
    ]);

    return new ContributionReward__redeemResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_redeem(
    _proposalId: Bytes,
    _avatar: Address,
    _whatToRedeem: Array<boolean>
  ): CallResult<ContributionReward__redeemResult> {
    let result = super.tryCall("redeem", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromBooleanArray(_whatToRedeem)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ContributionReward__redeemResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getPeriodsToPay(
    _proposalId: Bytes,
    _avatar: Address,
    _redeemType: BigInt
  ): BigInt {
    let result = super.call("getPeriodsToPay", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromUnsignedBigInt(_redeemType)
    ]);

    return result[0].toBigInt();
  }

  try_getPeriodsToPay(
    _proposalId: Bytes,
    _avatar: Address,
    _redeemType: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getPeriodsToPay", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromUnsignedBigInt(_redeemType)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getRedeemedPeriods(
    _proposalId: Bytes,
    _avatar: Address,
    _redeemType: BigInt
  ): BigInt {
    let result = super.call("getRedeemedPeriods", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromUnsignedBigInt(_redeemType)
    ]);

    return result[0].toBigInt();
  }

  try_getRedeemedPeriods(
    _proposalId: Bytes,
    _avatar: Address,
    _redeemType: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getRedeemedPeriods", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar),
      EthereumValue.fromUnsignedBigInt(_redeemType)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getProposalEthReward(_proposalId: Bytes, _avatar: Address): BigInt {
    let result = super.call("getProposalEthReward", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);

    return result[0].toBigInt();
  }

  try_getProposalEthReward(
    _proposalId: Bytes,
    _avatar: Address
  ): CallResult<BigInt> {
    let result = super.tryCall("getProposalEthReward", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getProposalExternalTokenReward(_proposalId: Bytes, _avatar: Address): BigInt {
    let result = super.call("getProposalExternalTokenReward", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);

    return result[0].toBigInt();
  }

  try_getProposalExternalTokenReward(
    _proposalId: Bytes,
    _avatar: Address
  ): CallResult<BigInt> {
    let result = super.tryCall("getProposalExternalTokenReward", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getProposalExternalToken(_proposalId: Bytes, _avatar: Address): Address {
    let result = super.call("getProposalExternalToken", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);

    return result[0].toAddress();
  }

  try_getProposalExternalToken(
    _proposalId: Bytes,
    _avatar: Address
  ): CallResult<Address> {
    let result = super.tryCall("getProposalExternalToken", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getProposalExecutionTime(_proposalId: Bytes, _avatar: Address): BigInt {
    let result = super.call("getProposalExecutionTime", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);

    return result[0].toBigInt();
  }

  try_getProposalExecutionTime(
    _proposalId: Bytes,
    _avatar: Address
  ): CallResult<BigInt> {
    let result = super.tryCall("getProposalExecutionTime", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_avatar)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class StakingTokenTransferCall extends EthereumCall {
  get inputs(): StakingTokenTransferCall__Inputs {
    return new StakingTokenTransferCall__Inputs(this);
  }

  get outputs(): StakingTokenTransferCall__Outputs {
    return new StakingTokenTransferCall__Outputs(this);
  }
}

export class StakingTokenTransferCall__Inputs {
  _call: StakingTokenTransferCall;

  constructor(call: StakingTokenTransferCall) {
    this._call = call;
  }

  get _stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class StakingTokenTransferCall__Outputs {
  _call: StakingTokenTransferCall;

  constructor(call: StakingTokenTransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintReputationCall extends EthereumCall {
  get inputs(): MintReputationCall__Inputs {
    return new MintReputationCall__Inputs(this);
  }

  get outputs(): MintReputationCall__Outputs {
    return new MintReputationCall__Outputs(this);
  }
}

export class MintReputationCall__Inputs {
  _call: MintReputationCall;

  constructor(call: MintReputationCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MintReputationCall__Outputs {
  _call: MintReputationCall;

  constructor(call: MintReputationCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnReputationCall extends EthereumCall {
  get inputs(): BurnReputationCall__Inputs {
    return new BurnReputationCall__Inputs(this);
  }

  get outputs(): BurnReputationCall__Outputs {
    return new BurnReputationCall__Outputs(this);
  }
}

export class BurnReputationCall__Inputs {
  _call: BurnReputationCall;

  constructor(call: BurnReputationCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class BurnReputationCall__Outputs {
  _call: BurnReputationCall;

  constructor(call: BurnReputationCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecuteProposalCall extends EthereumCall {
  get inputs(): ExecuteProposalCall__Inputs {
    return new ExecuteProposalCall__Inputs(this);
  }

  get outputs(): ExecuteProposalCall__Outputs {
    return new ExecuteProposalCall__Outputs(this);
  }
}

export class ExecuteProposalCall__Inputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _param(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExecuteProposalCall__Outputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetParametersCall extends EthereumCall {
  get inputs(): SetParametersCall__Inputs {
    return new SetParametersCall__Inputs(this);
  }

  get outputs(): SetParametersCall__Outputs {
    return new SetParametersCall__Outputs(this);
  }
}

export class SetParametersCall__Inputs {
  _call: SetParametersCall;

  constructor(call: SetParametersCall) {
    this._call = call;
  }

  get _voteApproveParams(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _intVote(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetParametersCall__Outputs {
  _call: SetParametersCall;

  constructor(call: SetParametersCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ProposeContributionRewardCall extends EthereumCall {
  get inputs(): ProposeContributionRewardCall__Inputs {
    return new ProposeContributionRewardCall__Inputs(this);
  }

  get outputs(): ProposeContributionRewardCall__Outputs {
    return new ProposeContributionRewardCall__Outputs(this);
  }
}

export class ProposeContributionRewardCall__Inputs {
  _call: ProposeContributionRewardCall;

  constructor(call: ProposeContributionRewardCall) {
    this._call = call;
  }

  get _avatar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _descriptionHash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _reputationChange(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _rewards(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _externalToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ProposeContributionRewardCall__Outputs {
  _call: ProposeContributionRewardCall;

  constructor(call: ProposeContributionRewardCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RedeemReputationCall extends EthereumCall {
  get inputs(): RedeemReputationCall__Inputs {
    return new RedeemReputationCall__Inputs(this);
  }

  get outputs(): RedeemReputationCall__Outputs {
    return new RedeemReputationCall__Outputs(this);
  }
}

export class RedeemReputationCall__Inputs {
  _call: RedeemReputationCall;

  constructor(call: RedeemReputationCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _avatar(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemReputationCall__Outputs {
  _call: RedeemReputationCall;

  constructor(call: RedeemReputationCall) {
    this._call = call;
  }

  get reputation(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemNativeTokenCall extends EthereumCall {
  get inputs(): RedeemNativeTokenCall__Inputs {
    return new RedeemNativeTokenCall__Inputs(this);
  }

  get outputs(): RedeemNativeTokenCall__Outputs {
    return new RedeemNativeTokenCall__Outputs(this);
  }
}

export class RedeemNativeTokenCall__Inputs {
  _call: RedeemNativeTokenCall;

  constructor(call: RedeemNativeTokenCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _avatar(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemNativeTokenCall__Outputs {
  _call: RedeemNativeTokenCall;

  constructor(call: RedeemNativeTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemEtherCall extends EthereumCall {
  get inputs(): RedeemEtherCall__Inputs {
    return new RedeemEtherCall__Inputs(this);
  }

  get outputs(): RedeemEtherCall__Outputs {
    return new RedeemEtherCall__Outputs(this);
  }
}

export class RedeemEtherCall__Inputs {
  _call: RedeemEtherCall;

  constructor(call: RedeemEtherCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _avatar(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemEtherCall__Outputs {
  _call: RedeemEtherCall;

  constructor(call: RedeemEtherCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemExternalTokenCall extends EthereumCall {
  get inputs(): RedeemExternalTokenCall__Inputs {
    return new RedeemExternalTokenCall__Inputs(this);
  }

  get outputs(): RedeemExternalTokenCall__Outputs {
    return new RedeemExternalTokenCall__Outputs(this);
  }
}

export class RedeemExternalTokenCall__Inputs {
  _call: RedeemExternalTokenCall;

  constructor(call: RedeemExternalTokenCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _avatar(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemExternalTokenCall__Outputs {
  _call: RedeemExternalTokenCall;

  constructor(call: RedeemExternalTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends EthereumCall {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _avatar(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _whatToRedeem(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get reputationReward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get nativeTokenReward(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get etherReward(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get externalTokenReward(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}
