// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class AssetWalletCreated extends EthereumEvent {
  get params(): AssetWalletCreated__Params {
    return new AssetWalletCreated__Params(this);
  }
}

export class AssetWalletCreated__Params {
  _event: AssetWalletCreated;

  constructor(event: AssetWalletCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get wallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AssetWalletFactory extends SmartContract {
  static bind(address: Address): AssetWalletFactory {
    return new AssetWalletFactory("AssetWalletFactory", address);
  }

  assetsRegistriesRegistry(): Address {
    let result = super.call("assetsRegistriesRegistry", []);

    return result[0].toAddress();
  }

  try_assetsRegistriesRegistry(): CallResult<Address> {
    let result = super.tryCall("assetsRegistriesRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  assetsRegistryIdHash(): Bytes {
    let result = super.call("assetsRegistryIdHash", []);

    return result[0].toBytes();
  }

  try_assetsRegistryIdHash(): CallResult<Bytes> {
    let result = super.tryCall("assetsRegistryIdHash", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  assetsWallets(param0: BigInt): Address {
    let result = super.call("assetsWallets", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_assetsWallets(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("assetsWallets", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getAssetsRegistry(): Address {
    let result = super.call("getAssetsRegistry", []);

    return result[0].toAddress();
  }

  try_getAssetsRegistry(): CallResult<Address> {
    let result = super.tryCall("getAssetsRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  createWallet(_assetId: BigInt): boolean {
    let result = super.call("createWallet", [
      EthereumValue.fromUnsignedBigInt(_assetId)
    ]);

    return result[0].toBoolean();
  }

  try_createWallet(_assetId: BigInt): CallResult<boolean> {
    let result = super.tryCall("createWallet", [
      EthereumValue.fromUnsignedBigInt(_assetId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _assetsRegistriesRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _assetsRegistryIdHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateWalletCall extends EthereumCall {
  get inputs(): CreateWalletCall__Inputs {
    return new CreateWalletCall__Inputs(this);
  }

  get outputs(): CreateWalletCall__Outputs {
    return new CreateWalletCall__Outputs(this);
  }
}

export class CreateWalletCall__Inputs {
  _call: CreateWalletCall;

  constructor(call: CreateWalletCall) {
    this._call = call;
  }

  get _assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateWalletCall__Outputs {
  _call: CreateWalletCall;

  constructor(call: CreateWalletCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
