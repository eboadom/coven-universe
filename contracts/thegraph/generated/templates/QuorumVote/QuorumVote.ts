// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class AVVoteProposal extends EthereumEvent {
  get params(): AVVoteProposal__Params {
    return new AVVoteProposal__Params(this);
  }
}

export class AVVoteProposal__Params {
  _event: AVVoteProposal;

  constructor(event: AVVoteProposal) {
    this._event = event;
  }

  get _proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _isProxyVote(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class NewProposal extends EthereumEvent {
  get params(): NewProposal__Params {
    return new NewProposal__Params(this);
  }
}

export class NewProposal__Params {
  _event: NewProposal;

  constructor(event: NewProposal) {
    this._event = event;
  }

  get _proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _organization(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _numOfChoices(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _proposer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _paramsHash(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class ExecuteProposal extends EthereumEvent {
  get params(): ExecuteProposal__Params {
    return new ExecuteProposal__Params(this);
  }
}

export class ExecuteProposal__Params {
  _event: ExecuteProposal;

  constructor(event: ExecuteProposal) {
    this._event = event;
  }

  get _proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _organization(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _decision(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _totalReputation(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VoteProposal extends EthereumEvent {
  get params(): VoteProposal__Params {
    return new VoteProposal__Params(this);
  }
}

export class VoteProposal__Params {
  _event: VoteProposal;

  constructor(event: VoteProposal) {
    this._event = event;
  }

  get _proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _organization(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _voter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _vote(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _reputation(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CancelProposal extends EthereumEvent {
  get params(): CancelProposal__Params {
    return new CancelProposal__Params(this);
  }
}

export class CancelProposal__Params {
  _event: CancelProposal;

  constructor(event: CancelProposal) {
    this._event = event;
  }

  get _proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _organization(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CancelVoting extends EthereumEvent {
  get params(): CancelVoting__Params {
    return new CancelVoting__Params(this);
  }
}

export class CancelVoting__Params {
  _event: CancelVoting;

  constructor(event: CancelVoting) {
    this._event = event;
  }

  get _proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _organization(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _voter(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class QuorumVote__parametersResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    return map;
  }
}

export class QuorumVote__voteInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class QuorumVote__proposalsResult {
  value0: Bytes;
  value1: boolean;
  value2: Address;
  value3: BigInt;
  value4: Bytes;
  value5: BigInt;

  constructor(
    value0: Bytes,
    value1: boolean,
    value2: Address,
    value3: BigInt,
    value4: Bytes,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromFixedBytes(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromFixedBytes(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class QuorumVote__getAllowedRangeOfChoicesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class QuorumVote extends SmartContract {
  static bind(address: Address): QuorumVote {
    return new QuorumVote("QuorumVote", address);
  }

  parameters(param0: Bytes): QuorumVote__parametersResult {
    let result = super.call("parameters", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return new QuorumVote__parametersResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_parameters(param0: Bytes): CallResult<QuorumVote__parametersResult> {
    let result = super.tryCall("parameters", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new QuorumVote__parametersResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  voteInfo(_proposalId: Bytes, _voter: Address): QuorumVote__voteInfoResult {
    let result = super.call("voteInfo", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_voter)
    ]);

    return new QuorumVote__voteInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_voteInfo(
    _proposalId: Bytes,
    _voter: Address
  ): CallResult<QuorumVote__voteInfoResult> {
    let result = super.tryCall("voteInfo", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromAddress(_voter)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new QuorumVote__voteInfoResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  proposalsCnt(): BigInt {
    let result = super.call("proposalsCnt", []);

    return result[0].toBigInt();
  }

  try_proposalsCnt(): CallResult<BigInt> {
    let result = super.tryCall("proposalsCnt", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  setParameters(_precReq: BigInt, _voteOnBehalf: Address): Bytes {
    let result = super.call("setParameters", [
      EthereumValue.fromUnsignedBigInt(_precReq),
      EthereumValue.fromAddress(_voteOnBehalf)
    ]);

    return result[0].toBytes();
  }

  try_setParameters(
    _precReq: BigInt,
    _voteOnBehalf: Address
  ): CallResult<Bytes> {
    let result = super.tryCall("setParameters", [
      EthereumValue.fromUnsignedBigInt(_precReq),
      EthereumValue.fromAddress(_voteOnBehalf)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getParametersHash(_precReq: BigInt, _voteOnBehalf: Address): Bytes {
    let result = super.call("getParametersHash", [
      EthereumValue.fromUnsignedBigInt(_precReq),
      EthereumValue.fromAddress(_voteOnBehalf)
    ]);

    return result[0].toBytes();
  }

  try_getParametersHash(
    _precReq: BigInt,
    _voteOnBehalf: Address
  ): CallResult<Bytes> {
    let result = super.tryCall("getParametersHash", [
      EthereumValue.fromUnsignedBigInt(_precReq),
      EthereumValue.fromAddress(_voteOnBehalf)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  proposals(param0: Bytes): QuorumVote__proposalsResult {
    let result = super.call("proposals", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return new QuorumVote__proposalsResult(
      result[0].toBytes(),
      result[1].toBoolean(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBytes(),
      result[5].toBigInt()
    );
  }

  try_proposals(param0: Bytes): CallResult<QuorumVote__proposalsResult> {
    let result = super.tryCall("proposals", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new QuorumVote__proposalsResult(
        value[0].toBytes(),
        value[1].toBoolean(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBytes(),
        value[5].toBigInt()
      )
    );
  }

  vote(
    _proposalId: Bytes,
    _vote: BigInt,
    _amount: BigInt,
    _voter: Address
  ): boolean {
    let result = super.call("vote", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromUnsignedBigInt(_vote),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_voter)
    ]);

    return result[0].toBoolean();
  }

  try_vote(
    _proposalId: Bytes,
    _vote: BigInt,
    _amount: BigInt,
    _voter: Address
  ): CallResult<boolean> {
    let result = super.tryCall("vote", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromUnsignedBigInt(_vote),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_voter)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getAllowedRangeOfChoices(): QuorumVote__getAllowedRangeOfChoicesResult {
    let result = super.call("getAllowedRangeOfChoices", []);

    return new QuorumVote__getAllowedRangeOfChoicesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAllowedRangeOfChoices(): CallResult<
    QuorumVote__getAllowedRangeOfChoicesResult
  > {
    let result = super.tryCall("getAllowedRangeOfChoices", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new QuorumVote__getAllowedRangeOfChoicesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  isAbstainAllow(): boolean {
    let result = super.call("isAbstainAllow", []);

    return result[0].toBoolean();
  }

  try_isAbstainAllow(): CallResult<boolean> {
    let result = super.tryCall("isAbstainAllow", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  propose(
    _numOfChoices: BigInt,
    _paramsHash: Bytes,
    param2: Address,
    _organization: Address
  ): Bytes {
    let result = super.call("propose", [
      EthereumValue.fromUnsignedBigInt(_numOfChoices),
      EthereumValue.fromFixedBytes(_paramsHash),
      EthereumValue.fromAddress(param2),
      EthereumValue.fromAddress(_organization)
    ]);

    return result[0].toBytes();
  }

  try_propose(
    _numOfChoices: BigInt,
    _paramsHash: Bytes,
    param2: Address,
    _organization: Address
  ): CallResult<Bytes> {
    let result = super.tryCall("propose", [
      EthereumValue.fromUnsignedBigInt(_numOfChoices),
      EthereumValue.fromFixedBytes(_paramsHash),
      EthereumValue.fromAddress(param2),
      EthereumValue.fromAddress(_organization)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  MAX_NUM_OF_CHOICES(): BigInt {
    let result = super.call("MAX_NUM_OF_CHOICES", []);

    return result[0].toBigInt();
  }

  try_MAX_NUM_OF_CHOICES(): CallResult<BigInt> {
    let result = super.tryCall("MAX_NUM_OF_CHOICES", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfChoices(_proposalId: Bytes): BigInt {
    let result = super.call("getNumberOfChoices", [
      EthereumValue.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBigInt();
  }

  try_getNumberOfChoices(_proposalId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getNumberOfChoices", [
      EthereumValue.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  voteStatus(_proposalId: Bytes, _choice: BigInt): BigInt {
    let result = super.call("voteStatus", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromUnsignedBigInt(_choice)
    ]);

    return result[0].toBigInt();
  }

  try_voteStatus(_proposalId: Bytes, _choice: BigInt): CallResult<BigInt> {
    let result = super.tryCall("voteStatus", [
      EthereumValue.fromFixedBytes(_proposalId),
      EthereumValue.fromUnsignedBigInt(_choice)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  organizations(param0: Bytes): Address {
    let result = super.call("organizations", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_organizations(param0: Bytes): CallResult<Address> {
    let result = super.tryCall("organizations", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isVotable(_proposalId: Bytes): boolean {
    let result = super.call("isVotable", [
      EthereumValue.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_isVotable(_proposalId: Bytes): CallResult<boolean> {
    let result = super.tryCall("isVotable", [
      EthereumValue.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  execute(_proposalId: Bytes): boolean {
    let result = super.call("execute", [
      EthereumValue.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_execute(_proposalId: Bytes): CallResult<boolean> {
    let result = super.tryCall("execute", [
      EthereumValue.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class SetParametersCall extends EthereumCall {
  get inputs(): SetParametersCall__Inputs {
    return new SetParametersCall__Inputs(this);
  }

  get outputs(): SetParametersCall__Outputs {
    return new SetParametersCall__Outputs(this);
  }
}

export class SetParametersCall__Inputs {
  _call: SetParametersCall;

  constructor(call: SetParametersCall) {
    this._call = call;
  }

  get _precReq(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _voteOnBehalf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetParametersCall__Outputs {
  _call: SetParametersCall;

  constructor(call: SetParametersCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class VoteCall extends EthereumCall {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _vote(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _voter(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ProposeCall extends EthereumCall {
  get inputs(): ProposeCall__Inputs {
    return new ProposeCall__Inputs(this);
  }

  get outputs(): ProposeCall__Outputs {
    return new ProposeCall__Outputs(this);
  }
}

export class ProposeCall__Inputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get _numOfChoices(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _paramsHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get value2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _organization(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ProposeCall__Outputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CancelVoteCall extends EthereumCall {
  get inputs(): CancelVoteCall__Inputs {
    return new CancelVoteCall__Inputs(this);
  }

  get outputs(): CancelVoteCall__Outputs {
    return new CancelVoteCall__Outputs(this);
  }
}

export class CancelVoteCall__Inputs {
  _call: CancelVoteCall;

  constructor(call: CancelVoteCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CancelVoteCall__Outputs {
  _call: CancelVoteCall;

  constructor(call: CancelVoteCall) {
    this._call = call;
  }
}

export class ExecuteCall extends EthereumCall {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
