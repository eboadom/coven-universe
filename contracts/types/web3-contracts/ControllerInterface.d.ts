/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions, EventOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {Callback, TransactionObject, ContractEvent} from "./types";

export class ControllerInterface extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    getNativeReputation(_avatar: string): TransactionObject<string>;

    isSchemeRegistered(
      _scheme: string,
      _avatar: string
    ): TransactionObject<boolean>;

    getSchemeParameters(
      _scheme: string,
      _avatar: string
    ): TransactionObject<string>;

    getGlobalConstraintParameters(
      _globalConstraint: string,
      _avatar: string
    ): TransactionObject<string>;

    getSchemePermissions(
      _scheme: string,
      _avatar: string
    ): TransactionObject<string>;

    globalConstraintsCount(
      _avatar: string
    ): TransactionObject<{
      0: BN;
      1: BN;
    }>;

    isGlobalConstraintRegistered(
      _globalConstraint: string,
      _avatar: string
    ): TransactionObject<boolean>;

    mintReputation(
      _amount: number | string,
      _to: string,
      _avatar: string
    ): TransactionObject<boolean>;

    burnReputation(
      _amount: number | string,
      _from: string,
      _avatar: string
    ): TransactionObject<boolean>;

    mintTokens(
      _amount: number | string,
      _beneficiary: string,
      _avatar: string
    ): TransactionObject<boolean>;

    registerScheme(
      _scheme: string,
      _paramsHash: string | number[],
      _permissions: string | number[],
      _avatar: string
    ): TransactionObject<boolean>;

    unregisterScheme(
      _scheme: string,
      _avatar: string
    ): TransactionObject<boolean>;

    unregisterSelf(_avatar: string): TransactionObject<boolean>;

    addGlobalConstraint(
      _globalConstraint: string,
      _params: string | number[],
      _avatar: string
    ): TransactionObject<boolean>;

    removeGlobalConstraint(
      _globalConstraint: string,
      _avatar: string
    ): TransactionObject<boolean>;

    upgradeController(
      _newController: string,
      _avatar: string
    ): TransactionObject<boolean>;

    genericCall(
      _contract: string,
      _data: string | number[],
      _avatar: string,
      _value: number | string
    ): TransactionObject<{
      0: boolean;
      1: string;
    }>;

    sendEther(
      _amountInWei: number | string,
      _to: string,
      _avatar: string
    ): TransactionObject<boolean>;

    externalTokenTransfer(
      _externalToken: string,
      _to: string,
      _value: number | string,
      _avatar: string
    ): TransactionObject<boolean>;

    externalTokenTransferFrom(
      _externalToken: string,
      _from: string,
      _to: string,
      _value: number | string,
      _avatar: string
    ): TransactionObject<boolean>;

    externalTokenApproval(
      _externalToken: string,
      _spender: string,
      _value: number | string,
      _avatar: string
    ): TransactionObject<boolean>;

    metaData(_metaData: string, _avatar: string): TransactionObject<boolean>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
