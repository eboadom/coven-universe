/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions, EventOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {Callback, TransactionObject, ContractEvent} from "./types";

export class ContributionReward extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    parameters(
      arg0: string | number[]
    ): TransactionObject<{
      voteApproveParams: string;
      intVote: string;
      0: string;
      1: string;
    }>;

    organizationsProposals(
      arg0: string,
      arg1: string | number[]
    ): TransactionObject<{
      nativeTokenReward: BN;
      reputationChange: BN;
      ethReward: BN;
      externalToken: string;
      externalTokenReward: BN;
      beneficiary: string;
      periodLength: BN;
      numberOfPeriods: BN;
      executionTime: BN;
      0: BN;
      1: BN;
      2: BN;
      3: string;
      4: BN;
      5: string;
      6: BN;
      7: BN;
      8: BN;
    }>;

    proposalsInfo(
      arg0: string,
      arg1: string | number[]
    ): TransactionObject<{
      blockNumber: BN;
      avatar: string;
      0: BN;
      1: string;
    }>;

    balanceOfStakingToken(
      _stakingToken: string,
      _proposalId: string | number[]
    ): TransactionObject<BN>;

    reputationOf(
      _owner: string,
      _proposalId: string | number[]
    ): TransactionObject<BN>;

    getTotalReputationSupply(
      _proposalId: string | number[]
    ): TransactionObject<BN>;

    getParametersHash(
      _voteApproveParams: string | number[],
      _intVote: string
    ): TransactionObject<string>;

    getPeriodsToPay(
      _proposalId: string | number[],
      _avatar: string,
      _redeemType: number | string
    ): TransactionObject<BN>;

    getRedeemedPeriods(
      _proposalId: string | number[],
      _avatar: string,
      _redeemType: number | string
    ): TransactionObject<BN>;

    getProposalEthReward(
      _proposalId: string | number[],
      _avatar: string
    ): TransactionObject<BN>;

    getProposalExternalTokenReward(
      _proposalId: string | number[],
      _avatar: string
    ): TransactionObject<BN>;

    getProposalExternalToken(
      _proposalId: string | number[],
      _avatar: string
    ): TransactionObject<string>;

    getProposalExecutionTime(
      _proposalId: string | number[],
      _avatar: string
    ): TransactionObject<BN>;

    stakingTokenTransfer(
      _stakingToken: string,
      _beneficiary: string,
      _amount: number | string,
      _proposalId: string | number[]
    ): TransactionObject<boolean>;

    mintReputation(
      _amount: number | string,
      _beneficiary: string,
      _proposalId: string | number[]
    ): TransactionObject<boolean>;

    burnReputation(
      _amount: number | string,
      _beneficiary: string,
      _proposalId: string | number[]
    ): TransactionObject<boolean>;

    executeProposal(
      _proposalId: string | number[],
      _param: number | string
    ): TransactionObject<boolean>;

    setParameters(
      _voteApproveParams: string | number[],
      _intVote: string
    ): TransactionObject<string>;

    proposeContributionReward(
      _avatar: string,
      _descriptionHash: string,
      _reputationChange: number | string,
      _rewards: (number | string)[],
      _externalToken: string,
      _beneficiary: string
    ): TransactionObject<string>;

    redeemReputation(
      _proposalId: string | number[],
      _avatar: string
    ): TransactionObject<BN>;

    redeemNativeToken(
      _proposalId: string | number[],
      _avatar: string
    ): TransactionObject<BN>;

    redeemEther(
      _proposalId: string | number[],
      _avatar: string
    ): TransactionObject<BN>;

    redeemExternalToken(
      _proposalId: string | number[],
      _avatar: string
    ): TransactionObject<BN>;

    redeem(
      _proposalId: string | number[],
      _avatar: string,
      _whatToRedeem: (boolean)[]
    ): TransactionObject<{
      reputationReward: BN;
      nativeTokenReward: BN;
      etherReward: BN;
      externalTokenReward: BN;
      0: BN;
      1: BN;
      2: BN;
      3: BN;
    }>;
  };
  events: {
    NewContributionProposal: ContractEvent<{
      _avatar: string;
      _proposalId: string;
      _intVoteInterface: string;
      _descriptionHash: string;
      _reputationChange: BN;
      _rewards: (BN)[];
      _externalToken: string;
      _beneficiary: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: BN;
      5: (BN)[];
      6: string;
      7: string;
    }>;
    ProposalExecuted: ContractEvent<{
      _avatar: string;
      _proposalId: string;
      _param: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    RedeemReputation: ContractEvent<{
      _avatar: string;
      _proposalId: string;
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
    }>;
    RedeemEther: ContractEvent<{
      _avatar: string;
      _proposalId: string;
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
    }>;
    RedeemNativeToken: ContractEvent<{
      _avatar: string;
      _proposalId: string;
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
    }>;
    RedeemExternalToken: ContractEvent<{
      _avatar: string;
      _proposalId: string;
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
