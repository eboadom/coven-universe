/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions, EventOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {Callback, TransactionObject, ContractEvent} from "./types";

export class ARCVotingMachineCallbacksMock extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    proposalsInfo(
      arg0: string,
      arg1: string | number[]
    ): TransactionObject<{
      blockNumber: BN;
      avatar: string;
      0: BN;
      1: string;
    }>;

    balanceOfStakingToken(
      _stakingToken: string,
      _proposalId: string | number[]
    ): TransactionObject<BN>;

    reputationOf(
      _owner: string,
      _proposalId: string | number[]
    ): TransactionObject<BN>;

    getTotalReputationSupply(
      _proposalId: string | number[]
    ): TransactionObject<BN>;

    stakingTokenTransfer(
      _stakingToken: string,
      _beneficiary: string,
      _amount: number | string,
      _proposalId: string | number[]
    ): TransactionObject<boolean>;

    mintReputation(
      _amount: number | string,
      _beneficiary: string,
      _proposalId: string | number[]
    ): TransactionObject<boolean>;

    burnReputation(
      _amount: number | string,
      _beneficiary: string,
      _proposalId: string | number[]
    ): TransactionObject<boolean>;

    propose(
      _proposalId: string | number[],
      _avatar: string,
      _votingMachine: string
    ): TransactionObject<void>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
