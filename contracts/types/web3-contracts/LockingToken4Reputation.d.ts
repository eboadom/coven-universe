/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions, EventOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {Callback, TransactionObject, ContractEvent} from "./types";

export class LockingToken4Reputation extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    scores(arg0: string): TransactionObject<BN>;

    lockers(
      arg0: string,
      arg1: string | number[]
    ): TransactionObject<{
      amount: BN;
      releaseTime: BN;
      0: BN;
      1: BN;
    }>;

    lockedTokens(arg0: string | number[]): TransactionObject<string>;

    redeem(_beneficiary: string): TransactionObject<BN>;

    initialize(
      _avatar: string,
      _reputationReward: number | string,
      _lockingStartTime: number | string,
      _lockingEndTime: number | string,
      _redeemEnableTime: number | string,
      _maxLockingPeriod: number | string,
      _priceOracleContract: string,
      _agreementHash: string | number[]
    ): TransactionObject<void>;

    release(
      _beneficiary: string,
      _lockingId: string | number[]
    ): TransactionObject<boolean>;

    lock(
      _amount: number | string,
      _period: number | string,
      _token: string,
      _agreementHash: string | number[]
    ): TransactionObject<string>;

    redeemEnableTime(): TransactionObject<BN>;
    priceOracleContract(): TransactionObject<string>;
    lockingStartTime(): TransactionObject<BN>;
    totalLocked(): TransactionObject<BN>;
    avatar(): TransactionObject<string>;
    getAgreementHash(): TransactionObject<string>;
    lockingEndTime(): TransactionObject<BN>;
    reputationRewardLeft(): TransactionObject<BN>;
    maxLockingPeriod(): TransactionObject<BN>;
    totalScore(): TransactionObject<BN>;
    lockingsCounter(): TransactionObject<BN>;
    totalLockedLeft(): TransactionObject<BN>;
    reputationReward(): TransactionObject<BN>;
  };
  events: {
    LockToken: ContractEvent<{
      _lockingId: string;
      _token: string;
      _numerator: BN;
      _denominator: BN;
      0: string;
      1: string;
      2: BN;
      3: BN;
    }>;
    Redeem: ContractEvent<{
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: BN;
    }>;
    Release: ContractEvent<{
      _lockingId: string;
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    Lock: ContractEvent<{
      _locker: string;
      _lockingId: string;
      _amount: BN;
      _period: BN;
      0: string;
      1: string;
      2: BN;
      3: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
