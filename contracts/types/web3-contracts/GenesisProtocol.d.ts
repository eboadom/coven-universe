/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions, EventOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {Callback, TransactionObject, ContractEvent} from "./types";

export class GenesisProtocol extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    parameters(
      arg0: string | number[]
    ): TransactionObject<{
      queuedVoteRequiredPercentage: BN;
      queuedVotePeriodLimit: BN;
      boostedVotePeriodLimit: BN;
      preBoostedVotePeriodLimit: BN;
      thresholdConst: BN;
      limitExponentValue: BN;
      quietEndingPeriod: BN;
      proposingRepReward: BN;
      votersReputationLossRatio: BN;
      minimumDaoBounty: BN;
      daoBountyConst: BN;
      activationTime: BN;
      voteOnBehalf: string;
      0: BN;
      1: BN;
      2: BN;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: BN;
      8: BN;
      9: BN;
      10: BN;
      11: BN;
      12: string;
    }>;

    getParametersHash(
      _params: (number | string)[],
      _voteOnBehalf: string
    ): TransactionObject<string>;

    threshold(
      _paramsHash: string | number[],
      _organizationId: string | number[]
    ): TransactionObject<BN>;

    proposals(
      arg0: string | number[]
    ): TransactionObject<{
      organizationId: string;
      callbacks: string;
      state: BN;
      winningVote: BN;
      proposer: string;
      currentBoostedVotePeriodLimit: BN;
      paramsHash: string;
      daoBountyRemain: BN;
      daoBounty: BN;
      totalStakes: BN;
      confidenceThreshold: BN;
      secondsFromTimeOutTillExecuteBoosted: BN;
      daoRedeemItsWinnings: boolean;
      0: string;
      1: string;
      2: BN;
      3: BN;
      4: string;
      5: BN;
      6: string;
      7: BN;
      8: BN;
      9: BN;
      10: BN;
      11: BN;
      12: boolean;
    }>;

    calcExecuteCallBounty(
      _proposalId: string | number[]
    ): TransactionObject<BN>;

    shouldBoost(_proposalId: string | number[]): TransactionObject<boolean>;

    stakesNonce(arg0: string): TransactionObject<BN>;

    organizations(arg0: string | number[]): TransactionObject<string>;

    averagesDownstakesOfBoosted(arg0: string | number[]): TransactionObject<BN>;

    orgBoostedProposalsCnt(arg0: string | number[]): TransactionObject<BN>;

    getNumberOfChoices(arg0: string | number[]): TransactionObject<BN>;

    getProposalTimes(_proposalId: string | number[]): TransactionObject<(BN)[]>;

    voteInfo(
      _proposalId: string | number[],
      _voter: string
    ): TransactionObject<{
      0: BN;
      1: BN;
    }>;

    voteStatus(
      _proposalId: string | number[],
      _choice: number | string
    ): TransactionObject<BN>;

    isVotable(_proposalId: string | number[]): TransactionObject<boolean>;

    proposalStatus(
      _proposalId: string | number[]
    ): TransactionObject<{
      0: BN;
      1: BN;
      2: BN;
      3: BN;
    }>;

    getProposalOrganization(
      _proposalId: string | number[]
    ): TransactionObject<string>;

    getStaker(
      _proposalId: string | number[],
      _staker: string
    ): TransactionObject<{
      0: BN;
      1: BN;
    }>;

    voteStake(
      _proposalId: string | number[],
      _vote: number | string
    ): TransactionObject<BN>;

    winningVote(_proposalId: string | number[]): TransactionObject<BN>;

    state(_proposalId: string | number[]): TransactionObject<BN>;

    getAllowedRangeOfChoices(): TransactionObject<{
      min: BN;
      max: BN;
      0: BN;
      1: BN;
    }>;

    score(_proposalId: string | number[]): TransactionObject<BN>;

    redeemDaoBounty(
      _proposalId: string | number[],
      _beneficiary: string
    ): TransactionObject<{
      redeemedAmount: BN;
      potentialAmount: BN;
      0: BN;
      1: BN;
    }>;

    propose(
      arg0: number | string,
      _paramsHash: string | number[],
      _proposer: string,
      _organization: string
    ): TransactionObject<string>;

    setParameters(
      _params: (number | string)[],
      _voteOnBehalf: string
    ): TransactionObject<string>;

    executeBoosted(_proposalId: string | number[]): TransactionObject<BN>;

    redeem(
      _proposalId: string | number[],
      _beneficiary: string
    ): TransactionObject<(BN)[]>;

    stake(
      _proposalId: string | number[],
      _vote: number | string,
      _amount: number | string
    ): TransactionObject<boolean>;

    stakeWithSignature(
      _proposalId: string | number[],
      _vote: number | string,
      _amount: number | string,
      _nonce: number | string,
      _signatureType: number | string,
      _signature: string | number[]
    ): TransactionObject<boolean>;

    vote(
      _proposalId: string | number[],
      _vote: number | string,
      _amount: number | string,
      _voter: string
    ): TransactionObject<boolean>;

    cancelVote(_proposalId: string | number[]): TransactionObject<void>;

    execute(_proposalId: string | number[]): TransactionObject<boolean>;

    NO(): TransactionObject<BN>;
    proposalsCnt(): TransactionObject<BN>;
    DELEGATION_HASH_EIP712(): TransactionObject<string>;
    stakingToken(): TransactionObject<string>;
    NUM_OF_CHOICES(): TransactionObject<BN>;
    YES(): TransactionObject<BN>;
    isAbstainAllow(): TransactionObject<boolean>;
  };
  events: {
    Stake: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _staker: string;
      _vote: BN;
      _amount: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
      4: BN;
    }>;
    Redeem: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
    }>;
    RedeemDaoBounty: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
    }>;
    RedeemReputation: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
    }>;
    StateChange: ContractEvent<{
      _proposalId: string;
      _proposalState: BN;
      0: string;
      1: BN;
    }>;
    GPExecuteProposal: ContractEvent<{
      _proposalId: string;
      _executionState: BN;
      0: string;
      1: BN;
    }>;
    ExpirationCallBounty: ContractEvent<{
      _proposalId: string;
      _beneficiary: string;
      _amount: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    ConfidenceLevelChange: ContractEvent<{
      _proposalId: string;
      _confidenceThreshold: BN;
      0: string;
      1: BN;
    }>;
    NewProposal: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _numOfChoices: BN;
      _proposer: string;
      _paramsHash: string;
      0: string;
      1: string;
      2: BN;
      3: string;
      4: string;
    }>;
    ExecuteProposal: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _decision: BN;
      _totalReputation: BN;
      0: string;
      1: string;
      2: BN;
      3: BN;
    }>;
    VoteProposal: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _voter: string;
      _vote: BN;
      _reputation: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
      4: BN;
    }>;
    CancelProposal: ContractEvent<{
      _proposalId: string;
      _organization: string;
      0: string;
      1: string;
    }>;
    CancelVoting: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _voter: string;
      0: string;
      1: string;
      2: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
