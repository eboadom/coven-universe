/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions, EventOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {Callback, TransactionObject, ContractEvent} from "./types";

export class WizardPresale extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    supportsInterface(
      interfaceId: string | number[]
    ): TransactionObject<boolean>;

    getApproved(tokenId: number | string): TransactionObject<string>;

    ownerOf(tokenId: number | string): TransactionObject<string>;

    _wizardsById(
      arg0: number | string
    ): TransactionObject<{
      affinity: BN;
      power: BN;
      owner: string;
      0: BN;
      1: BN;
      2: string;
    }>;

    balanceOf(owner: string): TransactionObject<BN>;

    isApprovedForAll(
      owner: string,
      operator: string
    ): TransactionObject<boolean>;

    getWizard(
      id: number | string
    ): TransactionObject<{
      owner: string;
      power: BN;
      affinity: BN;
      0: string;
      1: BN;
      2: BN;
    }>;

    costToPower(cost: number | string): TransactionObject<BN>;

    powerToCost(power: number | string): TransactionObject<BN>;

    approve(to: string, tokenId: number | string): TransactionObject<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: number | string
    ): TransactionObject<void>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: number | string
    ): TransactionObject<void>;

    setApprovalForAll(to: string, approved: boolean): TransactionObject<void>;

    setGatekeeper(gc: string): TransactionObject<void>;

    postponeSale(newStart: number | string): TransactionObject<void>;

    absorbWizard(
      id: number | string
    ): TransactionObject<{
      owner: string;
      power: BN;
      affinity: BN;
      0: string;
      1: BN;
      2: BN;
    }>;

    absorbWizardMulti(
      ids: (number | string)[]
    ): TransactionObject<{
      owners: (string)[];
      powers: (BN)[];
      affinities: (BN)[];
      0: (string)[];
      1: (BN)[];
      2: (BN)[];
    }>;

    conjureExclusiveWizard(
      id: number | string,
      owner: string,
      affinity: number | string
    ): TransactionObject<void>;

    safeConjureExclusiveWizard(
      id: number | string,
      owner: string,
      affinity: number | string
    ): TransactionObject<void>;

    conjureExclusiveWizardMulti(
      ids: (number | string)[],
      owners: (string)[],
      powers: (number | string)[],
      affinities: (number | string)[]
    ): TransactionObject<void>;

    setAffinity(
      wizardId: number | string,
      newAffinity: number | string
    ): TransactionObject<void>;

    conjureWizard(affinity: number | string): TransactionObject<BN>;

    conjureWizardMulti(
      affinities: (number | string)[]
    ): TransactionObject<(BN)[]>;

    destroy(): TransactionObject<void>;

    saleStartBlock(): TransactionObject<BN>;
    elementalWizardIncrement(): TransactionObject<BN>;
    saleDuration(): TransactionObject<BN>;
    guildmaster(): TransactionObject<string>;
    neutralWizardCost(): TransactionObject<BN>;
    _INTERFACE_ID_WIZARDPRESALE(): TransactionObject<string>;
    maxExclusives(): TransactionObject<BN>;
    gatekeeper(): TransactionObject<string>;
    nextWizardId(): TransactionObject<BN>;
    elementalWizardCost(): TransactionObject<BN>;
    isDuringSale(): TransactionObject<boolean>;
  };
  events: {
    StartBlockChanged: ContractEvent<{
      oldStartBlock: BN;
      newStartBlock: BN;
      0: BN;
      1: BN;
    }>;
    Transfer: ContractEvent<{
      from: string;
      to: string;
      tokenId: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    Approval: ContractEvent<{
      owner: string;
      approved: string;
      tokenId: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    ApprovalForAll: ContractEvent<{
      owner: string;
      operator: string;
      approved: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;
    WizardSummoned: ContractEvent<{
      tokenId: BN;
      element: BN;
      power: BN;
      0: BN;
      1: BN;
      2: BN;
    }>;
    WizardAlignmentAssigned: ContractEvent<{
      tokenId: BN;
      element: BN;
      0: BN;
      1: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
