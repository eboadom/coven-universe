/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions, EventOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {Callback, TransactionObject, ContractEvent} from "./types";

export class WizardGuild extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    getApproved(wizardId: number | string): TransactionObject<string>;

    wizardsById(
      arg0: number | string
    ): TransactionObject<{
      affinity: BN;
      innatePower: BN;
      owner: string;
      metadata: string;
      0: BN;
      1: BN;
      2: string;
      3: string;
    }>;

    ownerOf(wizardId: number | string): TransactionObject<string>;

    balanceOf(owner: string): TransactionObject<BN>;

    isApprovedForAll(
      owner: string,
      operator: string
    ): TransactionObject<boolean>;

    supportsInterface(
      interfaceId: string | number[]
    ): TransactionObject<boolean>;

    getWizard(
      id: number | string
    ): TransactionObject<{
      owner: string;
      innatePower: BN;
      affinity: BN;
      metadata: string;
      0: string;
      1: BN;
      2: BN;
      3: string;
    }>;

    isApprovedOrOwner(
      spender: string,
      tokenId: number | string
    ): TransactionObject<boolean>;

    verifySignature(
      wizardId: number | string,
      hash: string | number[],
      sig: string | number[]
    ): TransactionObject<void>;

    verifySignatures(
      wizardId1: number | string,
      wizardId2: number | string,
      hash1: string | number[],
      hash2: string | number[],
      sig1: string | number[],
      sig2: string | number[]
    ): TransactionObject<void>;

    approve(to: string, wizardId: number | string): TransactionObject<void>;

    transferFrom(
      from: string,
      to: string,
      wizardId: number | string
    ): TransactionObject<void>;

    setCfo(newCfo: string): TransactionObject<void>;

    safeTransferFrom(
      from: string,
      to: string,
      wizardId: number | string
    ): TransactionObject<void>;

    setCeo(newCeo: string): TransactionObject<void>;

    setCoo(newCoo: string): TransactionObject<void>;

    setApprovalForAll(to: string, approved: boolean): TransactionObject<void>;

    openSeries(
      minter: string,
      reservedIds: number | string
    ): TransactionObject<BN>;

    closeSeries(): TransactionObject<void>;

    mintWizards(
      powers: (number | string)[],
      affinities: (number | string)[],
      owner: string
    ): TransactionObject<(BN)[]>;

    mintReservedWizards(
      wizardIds: (number | string)[],
      powers: (number | string)[],
      affinities: (number | string)[],
      owner: string
    ): TransactionObject<void>;

    setMetadata(
      wizardIds: (number | string)[],
      metadata: (string | number[])[]
    ): TransactionObject<void>;

    setAffinity(
      wizardId: number | string,
      newAffinity: number | string
    ): TransactionObject<void>;

    cfoAddress(): TransactionObject<string>;
    ceoAddress(): TransactionObject<string>;
    cooAddress(): TransactionObject<string>;
    getNextWizardIndex(): TransactionObject<BN>;
  };
  events: {
    SeriesOpen: ContractEvent<{
      seriesIndex: BN;
      reservedIds: BN;
      0: BN;
      1: BN;
    }>;
    SeriesClose: ContractEvent<BN>;
    MetadataSet: ContractEvent<{
      wizardId: BN;
      metadata: string;
      0: BN;
      1: string;
    }>;
    Transfer: ContractEvent<{
      from: string;
      to: string;
      wizardId: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    Approval: ContractEvent<{
      owner: string;
      approved: string;
      wizardId: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    ApprovalForAll: ContractEvent<{
      owner: string;
      operator: string;
      approved: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;
    WizardConjured: ContractEvent<{
      wizardId: BN;
      affinity: BN;
      innatePower: BN;
      0: BN;
      1: BN;
      2: BN;
    }>;
    WizardAffinityAssigned: ContractEvent<{
      wizardId: BN;
      affinity: BN;
      0: BN;
      1: BN;
    }>;
    CEOTransferred: ContractEvent<{
      previousCeo: string;
      newCeo: string;
      0: string;
      1: string;
    }>;
    COOTransferred: ContractEvent<{
      previousCoo: string;
      newCoo: string;
      0: string;
      1: string;
    }>;
    CFOTransferred: ContractEvent<{
      previousCfo: string;
      newCfo: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
