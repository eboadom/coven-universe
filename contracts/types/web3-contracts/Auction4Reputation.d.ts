/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions, EventOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {Callback, TransactionObject, ContractEvent} from "./types";

export class Auction4Reputation extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    auctions(arg0: number | string): TransactionObject<BN>;

    getBid(_bidder: string, _auctionId: number | string): TransactionObject<BN>;

    initialize(
      _avatar: string,
      _auctionReputationReward: number | string,
      _auctionsStartTime: number | string,
      _auctionPeriod: number | string,
      _numberOfAuctions: number | string,
      _redeemEnableTime: number | string,
      _token: string,
      _wallet: string,
      _agreementHash: string | number[]
    ): TransactionObject<void>;

    redeem(
      _beneficiary: string,
      _auctionId: number | string
    ): TransactionObject<BN>;

    bid(
      _amount: number | string,
      _auctionId: number | string,
      _agreementHash: string | number[]
    ): TransactionObject<BN>;

    transferToWallet(): TransactionObject<void>;

    auctionPeriod(): TransactionObject<BN>;
    auctionReputationReward(): TransactionObject<BN>;
    redeemEnableTime(): TransactionObject<BN>;
    numberOfAuctions(): TransactionObject<BN>;
    wallet(): TransactionObject<string>;
    auctionsEndTime(): TransactionObject<BN>;
    avatar(): TransactionObject<string>;
    getAgreementHash(): TransactionObject<string>;
    auctionsStartTime(): TransactionObject<BN>;
    reputationRewardLeft(): TransactionObject<BN>;
    token(): TransactionObject<string>;
  };
  events: {
    Bid: ContractEvent<{
      _bidder: string;
      _auctionId: BN;
      _amount: BN;
      0: string;
      1: BN;
      2: BN;
    }>;
    Redeem: ContractEvent<{
      _auctionId: BN;
      _beneficiary: string;
      _amount: BN;
      0: BN;
      1: string;
      2: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
