/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions, EventOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {Callback, TransactionObject, ContractEvent} from "./types";

export class IntVoteInterface extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    getNumberOfChoices(_proposalId: string | number[]): TransactionObject<BN>;

    isVotable(_proposalId: string | number[]): TransactionObject<boolean>;

    voteStatus(
      _proposalId: string | number[],
      _choice: number | string
    ): TransactionObject<BN>;

    getAllowedRangeOfChoices(): TransactionObject<{
      min: BN;
      max: BN;
      0: BN;
      1: BN;
    }>;

    propose(
      _numOfChoices: number | string,
      _proposalParameters: string | number[],
      _proposer: string,
      _organization: string
    ): TransactionObject<string>;

    vote(
      _proposalId: string | number[],
      _vote: number | string,
      _rep: number | string,
      _voter: string
    ): TransactionObject<boolean>;

    cancelVote(_proposalId: string | number[]): TransactionObject<void>;

    isAbstainAllow(): TransactionObject<boolean>;
  };
  events: {
    NewProposal: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _numOfChoices: BN;
      _proposer: string;
      _paramsHash: string;
      0: string;
      1: string;
      2: BN;
      3: string;
      4: string;
    }>;
    ExecuteProposal: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _decision: BN;
      _totalReputation: BN;
      0: string;
      1: string;
      2: BN;
      3: BN;
    }>;
    VoteProposal: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _voter: string;
      _vote: BN;
      _reputation: BN;
      0: string;
      1: string;
      2: string;
      3: BN;
      4: BN;
    }>;
    CancelProposal: ContractEvent<{
      _proposalId: string;
      _organization: string;
      0: string;
      1: string;
    }>;
    CancelVoting: ContractEvent<{
      _proposalId: string;
      _organization: string;
      _voter: string;
      0: string;
      1: string;
      2: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
