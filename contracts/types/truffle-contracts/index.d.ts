/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import {BigNumber} from "bignumber.js";

export interface AbsoluteVoteContract
  extends Truffle.Contract<AbsoluteVoteInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AbsoluteVoteInstance>;
}

export interface AbsoluteVoteExecuteMockContract
  extends Truffle.Contract<AbsoluteVoteExecuteMockInstance> {
  "new"(
    _reputation: string | BigNumber,
    _absoluteVote: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<AbsoluteVoteExecuteMockInstance>;
}

export interface AccessControlContract
  extends Truffle.Contract<AccessControlInstance> {
  "new"(
    newCooAddress: string | BigNumber,
    newCfoAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<AccessControlInstance>;
}

export interface ActionMockContract
  extends Truffle.Contract<ActionMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ActionMockInstance>;
}

export interface AgreementContract extends Truffle.Contract<AgreementInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AgreementInstance>;
}

export interface AgreementMockContract
  extends Truffle.Contract<AgreementMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AgreementMockInstance>;
}

export interface ARCDebugContract extends Truffle.Contract<ARCDebugInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ARCDebugInstance>;
}

export interface ARCVotingMachineCallbacksMockContract
  extends Truffle.Contract<ARCVotingMachineCallbacksMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ARCVotingMachineCallbacksMockInstance>;
}

export interface AssetsRegistriesRegistryContract
  extends Truffle.Contract<AssetsRegistriesRegistryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<AssetsRegistriesRegistryInstance>;
}

export interface AssetWalletContract
  extends Truffle.Contract<AssetWalletInstance> {
  "new"(
    _assetWalletFactory: string | BigNumber,
    _assetId: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<AssetWalletInstance>;
}

export interface AssetWalletFactoryContract
  extends Truffle.Contract<AssetWalletFactoryInstance> {
  "new"(
    _assetsRegistriesRegistry: string | BigNumber,
    _assetsRegistryIdHash: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<AssetWalletFactoryInstance>;
}

export interface Auction4ReputationContract
  extends Truffle.Contract<Auction4ReputationInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Auction4ReputationInstance>;
}

export interface AvatarContract extends Truffle.Contract<AvatarInstance> {
  "new"(
    _orgName: string,
    _nativeToken: string | BigNumber,
    _nativeReputation: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<AvatarInstance>;
}

export interface BadERC20Contract extends Truffle.Contract<BadERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BadERC20Instance>;
}

export interface ContributionRewardContract
  extends Truffle.Contract<ContributionRewardInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ContributionRewardInstance>;
}

export interface ControllerContract
  extends Truffle.Contract<ControllerInstance> {
  "new"(
    _avatar: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<ControllerInstance>;
}

export interface ControllerCreatorContract
  extends Truffle.Contract<ControllerCreatorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ControllerCreatorInstance>;
}

export interface ControllerInterfaceContract
  extends Truffle.Contract<ControllerInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ControllerInterfaceInstance>;
}

export interface CurveInterfaceContract
  extends Truffle.Contract<CurveInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CurveInterfaceInstance>;
}

export interface DaoCreatorContract
  extends Truffle.Contract<DaoCreatorInstance> {
  "new"(
    _controllerCreator: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<DaoCreatorInstance>;
}

export interface DAOTokenContract extends Truffle.Contract<DAOTokenInstance> {
  "new"(
    _name: string,
    _symbol: string,
    _cap: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<DAOTokenInstance>;
}

export interface DebugContract extends Truffle.Contract<DebugInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DebugInstance>;
}

export interface ERC165Contract extends Truffle.Contract<ERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC165Instance>;
}

export interface ERC1654Contract extends Truffle.Contract<ERC1654Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC1654Instance>;
}

export interface ERC165InterfaceContract
  extends Truffle.Contract<ERC165InterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC165InterfaceInstance>;
}

export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20Instance>;
}

export interface ERC20BurnableContract
  extends Truffle.Contract<ERC20BurnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20BurnableInstance>;
}

export interface ERC20MockContract extends Truffle.Contract<ERC20MockInstance> {
  "new"(
    initialAccount: string | BigNumber,
    initialBalance: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC20MockInstance>;
}

export interface ERC721ReceivableContract
  extends Truffle.Contract<ERC721ReceivableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC721ReceivableInstance>;
}

export interface ERC721ReceiverDraftContract
  extends Truffle.Contract<ERC721ReceiverDraftInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ERC721ReceiverDraftInstance>;
}

export interface ERC721ReceiverFinalContract
  extends Truffle.Contract<ERC721ReceiverFinalInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ERC721ReceiverFinalInstance>;
}

export interface ERC827Contract extends Truffle.Contract<ERC827Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC827Instance>;
}

export interface ERC827TokenContract
  extends Truffle.Contract<ERC827TokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC827TokenInstance>;
}

export interface ERC827TokenMockContract
  extends Truffle.Contract<ERC827TokenMockInstance> {
  "new"(
    initialAccount: string | BigNumber,
    initialBalance: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC827TokenMockInstance>;
}

export interface ExternalLocking4ReputationContract
  extends Truffle.Contract<ExternalLocking4ReputationInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ExternalLocking4ReputationInstance>;
}

export interface ExternalTokenLockerMockContract
  extends Truffle.Contract<ExternalTokenLockerMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ExternalTokenLockerMockInstance>;
}

export interface FixedReputationAllocationContract
  extends Truffle.Contract<FixedReputationAllocationInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<FixedReputationAllocationInstance>;
}

export interface ForwarderContract extends Truffle.Contract<ForwarderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ForwarderInstance>;
}

export interface GenericSchemeContract
  extends Truffle.Contract<GenericSchemeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<GenericSchemeInstance>;
}

export interface GenesisProtocolContract
  extends Truffle.Contract<GenesisProtocolInstance> {
  "new"(
    _stakingToken: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<GenesisProtocolInstance>;
}

export interface GenesisProtocolCallbacksMockContract
  extends Truffle.Contract<GenesisProtocolCallbacksMockInstance> {
  "new"(
    _reputation: string | BigNumber,
    _stakingToken: string | BigNumber,
    _genesisProtocol: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<GenesisProtocolCallbacksMockInstance>;
}

export interface GenesisProtocolLogicContract
  extends Truffle.Contract<GenesisProtocolLogicInstance> {
  "new"(
    _stakingToken: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<GenesisProtocolLogicInstance>;
}

export interface GlobalConstraintInterfaceContract
  extends Truffle.Contract<GlobalConstraintInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<GlobalConstraintInterfaceInstance>;
}

export interface GlobalConstraintMockContract
  extends Truffle.Contract<GlobalConstraintMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<GlobalConstraintMockInstance>;
}

export interface GlobalConstraintRegistrarContract
  extends Truffle.Contract<GlobalConstraintRegistrarInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<GlobalConstraintRegistrarInstance>;
}

export interface IAssetsRegistriesRegistryContract
  extends Truffle.Contract<IAssetsRegistriesRegistryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IAssetsRegistriesRegistryInstance>;
}

export interface IERC165Contract extends Truffle.Contract<IERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC165Instance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface IERC721Contract extends Truffle.Contract<IERC721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721Instance>;
}

export interface IERC721ReceiverContract
  extends Truffle.Contract<IERC721ReceiverInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721ReceiverInstance>;
}

export interface IntVoteInterfaceContract
  extends Truffle.Contract<IntVoteInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IntVoteInterfaceInstance>;
}

export interface IOwnedAssetContract
  extends Truffle.Contract<IOwnedAssetInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IOwnedAssetInstance>;
}

export interface Locking4ReputationContract
  extends Truffle.Contract<Locking4ReputationInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Locking4ReputationInstance>;
}

export interface LockingEth4ReputationContract
  extends Truffle.Contract<LockingEth4ReputationInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<LockingEth4ReputationInstance>;
}

export interface LockingToken4ReputationContract
  extends Truffle.Contract<LockingToken4ReputationInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<LockingToken4ReputationInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface OrganizationRegisterContract
  extends Truffle.Contract<OrganizationRegisterInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<OrganizationRegisterInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface PolkaCurveContract
  extends Truffle.Contract<PolkaCurveInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PolkaCurveInstance>;
}

export interface PriceOracleInterfaceContract
  extends Truffle.Contract<PriceOracleInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<PriceOracleInterfaceInstance>;
}

export interface PriceOracleMockContract
  extends Truffle.Contract<PriceOracleMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PriceOracleMockInstance>;
}

export interface ProposalExecuteInterfaceContract
  extends Truffle.Contract<ProposalExecuteInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ProposalExecuteInterfaceInstance>;
}

export interface QuorumVoteContract
  extends Truffle.Contract<QuorumVoteInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<QuorumVoteInstance>;
}

export interface RealMathTesterContract
  extends Truffle.Contract<RealMathTesterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RealMathTesterInstance>;
}

export interface RedeemerContract extends Truffle.Contract<RedeemerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RedeemerInstance>;
}

export interface RepAllocationContract
  extends Truffle.Contract<RepAllocationInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RepAllocationInstance>;
}

export interface ReputationContract
  extends Truffle.Contract<ReputationInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ReputationInstance>;
}

export interface ReputationFromTokenContract
  extends Truffle.Contract<ReputationFromTokenInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ReputationFromTokenInstance>;
}

export interface SafeERC20MockContract
  extends Truffle.Contract<SafeERC20MockInstance> {
  "new"(
    _token: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<SafeERC20MockInstance>;
}

export interface SchemeRegistrarContract
  extends Truffle.Contract<SchemeRegistrarInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SchemeRegistrarInstance>;
}

export interface SignalSchemeContract
  extends Truffle.Contract<SignalSchemeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SignalSchemeInstance>;
}

export interface TestContractContract
  extends Truffle.Contract<TestContractInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestContractInstance>;
}

export interface TokenCapGCContract
  extends Truffle.Contract<TokenCapGCInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TokenCapGCInstance>;
}

export interface UControllerContract
  extends Truffle.Contract<UControllerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UControllerInstance>;
}

export interface UniversalSchemeMockContract
  extends Truffle.Contract<UniversalSchemeMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<UniversalSchemeMockInstance>;
}

export interface UpgradeSchemeContract
  extends Truffle.Contract<UpgradeSchemeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UpgradeSchemeInstance>;
}

export interface VoteInOrganizationSchemeContract
  extends Truffle.Contract<VoteInOrganizationSchemeInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<VoteInOrganizationSchemeInstance>;
}

export interface VotingMachineCallbacksContract
  extends Truffle.Contract<VotingMachineCallbacksInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<VotingMachineCallbacksInstance>;
}

export interface VotingMachineCallbacksInterfaceContract
  extends Truffle.Contract<VotingMachineCallbacksInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<VotingMachineCallbacksInterfaceInstance>;
}

export interface WalletContract extends Truffle.Contract<WalletInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WalletInstance>;
}

export interface WizardGuildContract
  extends Truffle.Contract<WizardGuildInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WizardGuildInstance>;
}

export interface WizardGuildInterfaceContract
  extends Truffle.Contract<WizardGuildInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<WizardGuildInterfaceInstance>;
}

export interface WizardNFTContract extends Truffle.Contract<WizardNFTInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WizardNFTInstance>;
}

export interface WizardPresaleContract
  extends Truffle.Contract<WizardPresaleInstance> {
  "new"(
    startingCost: number | BigNumber | string,
    costIncremement: number | BigNumber | string,
    exclusiveCount: number | BigNumber | string,
    startBlock: number | BigNumber | string,
    duration: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<WizardPresaleInstance>;
}

export interface WizardPresaleInterfaceContract
  extends Truffle.Contract<WizardPresaleInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<WizardPresaleInterfaceInstance>;
}

export interface WizardPresaleNFTContract
  extends Truffle.Contract<WizardPresaleNFTInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WizardPresaleNFTInstance>;
}

export interface AbsoluteVoteInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  proposals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean, string, BigNumber, string, BigNumber]>;

  organizations(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getNumberOfChoices(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  voteInfo(
    _proposalId: string | BigNumber,
    _voter: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  voteStatus(
    _proposalId: string | BigNumber,
    _choice: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isVotable(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getAllowedRangeOfChoices(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getParametersHash(
    _precReq: number | BigNumber | string,
    _voteOnBehalf: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  propose: {
    (
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  vote: {
    (
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelVote: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  execute: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _precReq: number | BigNumber | string,
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _precReq: number | BigNumber | string,
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _precReq: number | BigNumber | string,
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _precReq: number | BigNumber | string,
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposalsCnt(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  MAX_NUM_OF_CHOICES(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  isAbstainAllow(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface AbsoluteVoteExecuteMockInstance
  extends Truffle.ContractInstance {
  proposalsBlockNumbers(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  propose: {
    (
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputationTest: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setProposal: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  absoluteVote(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  reputation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AccessControlInstance extends Truffle.ContractInstance {
  setCeo: {
    (
      newCeo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newCeo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newCeo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newCeo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoo: {
    (
      newCoo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newCoo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newCoo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newCoo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCfo: {
    (
      newCfo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newCfo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newCfo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newCfo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cfoAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
  ceoAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
  cooAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ActionMockInstance extends Truffle.ContractInstance {
  test3(txDetails?: Truffle.TransactionDetails): Promise<void>;

  test: {
    (
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  test2: {
    (
      _addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withoutReturnValue: {
    (
      _addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _addr: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setActivationTime: {
    (
      _activationTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _activationTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _activationTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _activationTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  activationTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface AgreementInstance extends Truffle.ContractInstance {
  getAgreementHash(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AgreementMockInstance extends Truffle.ContractInstance {
  test(
    _agreementHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setAgreementHashTest: {
    (
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAgreementHash(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ARCDebugInstance extends Truffle.ContractInstance {}

export interface ARCVotingMachineCallbacksMockInstance
  extends Truffle.ContractInstance {
  proposalsInfo(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  propose: {
    (
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _votingMachine: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _votingMachine: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _votingMachine: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _votingMachine: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface AssetsRegistriesRegistryInstance
  extends Truffle.ContractInstance {
  getAssetsRegistryAddress(
    _hashedAssetRegistryId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAssetsRegistryAddress: {
    (
      _hashedAssetRegistryId: string | BigNumber,
      _assetRegistryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _hashedAssetRegistryId: string | BigNumber,
      _assetRegistryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _hashedAssetRegistryId: string | BigNumber,
      _assetRegistryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _hashedAssetRegistryId: string | BigNumber,
      _assetRegistryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface AssetWalletInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  genericCall: {
    (
      _to: string | BigNumber,
      _gas: number | BigNumber | string,
      _value: number | BigNumber | string,
      _encodedFunction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _gas: number | BigNumber | string,
      _value: number | BigNumber | string,
      _encodedFunction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _gas: number | BigNumber | string,
      _value: number | BigNumber | string,
      _encodedFunction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _gas: number | BigNumber | string,
      _value: number | BigNumber | string,
      _encodedFunction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assetOwned(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  assetWalletFactory(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AssetWalletFactoryInstance extends Truffle.ContractInstance {
  assetsWallets(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createWallet: {
    (
      _assetId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _assetId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _assetId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _assetId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assetsRegistriesRegistry(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
  assetsRegistryIdHash(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  getAssetsRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface Auction4ReputationInstance extends Truffle.ContractInstance {
  auctions(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getBid(
    _bidder: string | BigNumber,
    _auctionId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  initialize: {
    (
      _avatar: string | BigNumber,
      _auctionReputationReward: number | BigNumber | string,
      _auctionsStartTime: number | BigNumber | string,
      _auctionPeriod: number | BigNumber | string,
      _numberOfAuctions: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _token: string | BigNumber,
      _wallet: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _auctionReputationReward: number | BigNumber | string,
      _auctionsStartTime: number | BigNumber | string,
      _auctionPeriod: number | BigNumber | string,
      _numberOfAuctions: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _token: string | BigNumber,
      _wallet: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _auctionReputationReward: number | BigNumber | string,
      _auctionsStartTime: number | BigNumber | string,
      _auctionPeriod: number | BigNumber | string,
      _numberOfAuctions: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _token: string | BigNumber,
      _wallet: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _auctionReputationReward: number | BigNumber | string,
      _auctionsStartTime: number | BigNumber | string,
      _auctionPeriod: number | BigNumber | string,
      _numberOfAuctions: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _token: string | BigNumber,
      _wallet: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      _beneficiary: string | BigNumber,
      _auctionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      _auctionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      _auctionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      _auctionId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  bid: {
    (
      _amount: number | BigNumber | string,
      _auctionId: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _auctionId: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _auctionId: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _auctionId: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToWallet: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  auctionPeriod(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  auctionReputationReward(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  redeemEnableTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  numberOfAuctions(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  wallet(txDetails?: Truffle.TransactionDetails): Promise<string>;
  auctionsEndTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  avatar(txDetails?: Truffle.TransactionDetails): Promise<string>;
  getAgreementHash(txDetails?: Truffle.TransactionDetails): Promise<string>;
  auctionsStartTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationRewardLeft(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  token(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AvatarInstance extends Truffle.ContractInstance {
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  genericCall: {
    (
      _contract: string | BigNumber,
      _data: string,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _contract: string | BigNumber,
      _data: string,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      _contract: string | BigNumber,
      _data: string,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contract: string | BigNumber,
      _data: string,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendEther: {
    (
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenTransfer: {
    (
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenTransferFrom: {
    (
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenApproval: {
    (
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  metaData: {
    (_metaData: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _metaData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _metaData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _metaData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  orgName(txDetails?: Truffle.TransactionDetails): Promise<string>;
  nativeReputation(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  nativeToken(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface BadERC20Instance extends Truffle.ContractInstance {
  balances(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      arg0: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ContributionRewardInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  organizationsProposals(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  proposalsInfo(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getParametersHash(
    _voteApproveParams: string | BigNumber,
    _intVote: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPeriodsToPay(
    _proposalId: string | BigNumber,
    _avatar: string | BigNumber,
    _redeemType: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getRedeemedPeriods(
    _proposalId: string | BigNumber,
    _avatar: string | BigNumber,
    _redeemType: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getProposalEthReward(
    _proposalId: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getProposalExternalTokenReward(
    _proposalId: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getProposalExternalToken(
    _proposalId: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getProposalExecutionTime(
    _proposalId: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _voteApproveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _voteApproveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _voteApproveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voteApproveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeContributionReward: {
    (
      _avatar: string | BigNumber,
      _descriptionHash: string,
      _reputationChange: number | BigNumber | string,
      _rewards: (number | BigNumber | string)[],
      _externalToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _descriptionHash: string,
      _reputationChange: number | BigNumber | string,
      _rewards: (number | BigNumber | string)[],
      _externalToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      _descriptionHash: string,
      _reputationChange: number | BigNumber | string,
      _rewards: (number | BigNumber | string)[],
      _externalToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _descriptionHash: string,
      _reputationChange: number | BigNumber | string,
      _rewards: (number | BigNumber | string)[],
      _externalToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemReputation: {
    (
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemNativeToken: {
    (
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemEther: {
    (
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemExternalToken: {
    (
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _whatToRedeem: (boolean)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _whatToRedeem: (boolean)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _whatToRedeem: (boolean)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _whatToRedeem: (boolean)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ControllerInstance extends Truffle.ContractInstance {
  globalConstraintsRegisterPre(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, BigNumber]>;

  globalConstraintsPre(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  globalConstraintsRegisterPost(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, BigNumber]>;

  schemes(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  globalConstraintsPost(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  getNativeReputation(
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isSchemeRegistered(
    _scheme: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getSchemeParameters(
    _scheme: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getSchemePermissions(
    _scheme: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getGlobalConstraintParameters(
    _globalConstraint: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  globalConstraintsCount(
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  isGlobalConstraintRegistered(
    _globalConstraint: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintTokens: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerScheme: {
    (
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterScheme: {
    (
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterSelf: {
    (
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addGlobalConstraint: {
    (
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeGlobalConstraint: {
    (
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeController: {
    (
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  genericCall: {
    (
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendEther: {
    (
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenTransfer: {
    (
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenTransferFrom: {
    (
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenApproval: {
    (
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  metaData: {
    (
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newController(txDetails?: Truffle.TransactionDetails): Promise<string>;
  avatar(txDetails?: Truffle.TransactionDetails): Promise<string>;
  nativeReputation(txDetails?: Truffle.TransactionDetails): Promise<string>;
  nativeToken(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ControllerCreatorInstance extends Truffle.ContractInstance {
  create: {
    (
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ControllerInterfaceInstance extends Truffle.ContractInstance {
  getNativeReputation(
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isSchemeRegistered(
    _scheme: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getSchemeParameters(
    _scheme: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getGlobalConstraintParameters(
    _globalConstraint: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getSchemePermissions(
    _scheme: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  globalConstraintsCount(
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  isGlobalConstraintRegistered(
    _globalConstraint: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintTokens: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerScheme: {
    (
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterScheme: {
    (
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterSelf: {
    (
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addGlobalConstraint: {
    (
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeGlobalConstraint: {
    (
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeController: {
    (
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  genericCall: {
    (
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendEther: {
    (
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenTransfer: {
    (
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenTransferFrom: {
    (
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenApproval: {
    (
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  metaData: {
    (
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface CurveInterfaceInstance extends Truffle.ContractInstance {
  calc(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface DaoCreatorInstance extends Truffle.ContractInstance {
  locks(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  addFounders: {
    (
      _avatar: string | BigNumber,
      _founders: (string | BigNumber)[],
      _foundersReputationAmount: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _founders: (string | BigNumber)[],
      _foundersReputationAmount: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _avatar: string | BigNumber,
      _founders: (string | BigNumber)[],
      _foundersReputationAmount: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _founders: (string | BigNumber)[],
      _foundersReputationAmount: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  forgeOrg: {
    (
      _orgName: string,
      _tokenName: string,
      _tokenSymbol: string,
      _founders: (string | BigNumber)[],
      _foundersReputationAmount: (number | BigNumber | string)[],
      _cowvenGrate: string,
      _cowvenDescription: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _orgName: string,
      _tokenName: string,
      _tokenSymbol: string,
      _founders: (string | BigNumber)[],
      _foundersReputationAmount: (number | BigNumber | string)[],
      _cowvenGrate: string,
      _cowvenDescription: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _orgName: string,
      _tokenName: string,
      _tokenSymbol: string,
      _founders: (string | BigNumber)[],
      _foundersReputationAmount: (number | BigNumber | string)[],
      _cowvenGrate: string,
      _cowvenDescription: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _orgName: string,
      _tokenName: string,
      _tokenSymbol: string,
      _founders: (string | BigNumber)[],
      _foundersReputationAmount: (number | BigNumber | string)[],
      _cowvenGrate: string,
      _cowvenDescription: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSchemes: {
    (
      _avatar: string | BigNumber,
      _schemes: (string | BigNumber)[],
      _params: (string | BigNumber)[],
      _permissions: (string | BigNumber)[],
      _metaData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _schemes: (string | BigNumber)[],
      _params: (string | BigNumber)[],
      _permissions: (string | BigNumber)[],
      _metaData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _schemes: (string | BigNumber)[],
      _params: (string | BigNumber)[],
      _permissions: (string | BigNumber)[],
      _metaData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _schemes: (string | BigNumber)[],
      _params: (string | BigNumber)[],
      _permissions: (string | BigNumber)[],
      _metaData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DAOTokenInstance extends Truffle.ContractInstance {
  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      _to: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  cap(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface DebugInstance extends Truffle.ContractInstance {}

export interface ERC165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ERC1654Instance extends Truffle.ContractInstance {
  isValidSignature(
    hash: string | BigNumber,
    _signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ERC1654_VALIDSIGNATURE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface ERC165InterfaceInstance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ERC20Instance extends Truffle.ContractInstance {
  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ERC20BurnableInstance extends Truffle.ContractInstance {
  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ERC20MockInstance extends Truffle.ContractInstance {
  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ERC721ReceivableInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721ReceiverDraftInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721ReceiverFinalInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _operator: string | BigNumber,
      _from: string | BigNumber,
      _tokenId: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC827Instance extends Truffle.ContractInstance {
  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveAndCall: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferAndCall: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFromAndCall: {
    (
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ERC827TokenInstance extends Truffle.ContractInstance {
  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveAndCall: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferAndCall: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFromAndCall: {
    (
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseApprovalAndCall: {
    (
      _spender: string | BigNumber,
      _addedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _addedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _addedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _addedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseApprovalAndCall: {
    (
      _spender: string | BigNumber,
      _subtractedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _subtractedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _subtractedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _subtractedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ERC827TokenMockInstance extends Truffle.ContractInstance {
  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferAndCall: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseApprovalAndCall: {
    (
      _spender: string | BigNumber,
      _addedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _addedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _addedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _addedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFromAndCall: {
    (
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveAndCall: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseApprovalAndCall: {
    (
      _spender: string | BigNumber,
      _subtractedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _subtractedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _subtractedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _subtractedValue: number | BigNumber | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ExternalLocking4ReputationInstance
  extends Truffle.ContractInstance {
  scores(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  lockers(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  externalLockers(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  registrar(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  redeem: {
    (
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _claimingStartTime: number | BigNumber | string,
      _claimingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _externalLockingContract: string | BigNumber,
      _getBalanceFuncSignature: string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _claimingStartTime: number | BigNumber | string,
      _claimingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _externalLockingContract: string | BigNumber,
      _getBalanceFuncSignature: string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _claimingStartTime: number | BigNumber | string,
      _claimingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _externalLockingContract: string | BigNumber,
      _getBalanceFuncSignature: string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _claimingStartTime: number | BigNumber | string,
      _claimingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _externalLockingContract: string | BigNumber,
      _getBalanceFuncSignature: string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claim: {
    (
      _beneficiary: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  register: {
    (
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemEnableTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  lockingStartTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalLocked(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  avatar(txDetails?: Truffle.TransactionDetails): Promise<string>;
  getAgreementHash(txDetails?: Truffle.TransactionDetails): Promise<string>;
  externalLockingContract(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
  lockingEndTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationRewardLeft(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  maxLockingPeriod(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalScore(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  lockingsCounter(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalLockedLeft(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationReward(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  getBalanceFuncSignature(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface ExternalTokenLockerMockInstance
  extends Truffle.ContractInstance {
  lockedTokenBalances(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOf(
    _beneficiary: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lock: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface FixedReputationAllocationInstance
  extends Truffle.ContractInstance {
  beneficiaries(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addBeneficiary: {
    (
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addBeneficiaries: {
    (
      _beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiaries: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  enable: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  numberOfBeneficiaries(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  redeemEnableTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  isEnable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  avatar(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  beneficiaryReward(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationReward(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ForwarderInstance extends Truffle.ContractInstance {
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _avatar: string | BigNumber,
      _expirationTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _expirationTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _expirationTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _expirationTime: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterSelf: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  avatar(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  expirationTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface GenericSchemeInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, string]>;

  organizationsProposals(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber, boolean, boolean]>;

  proposalsInfo(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getParametersHash(
    _voteParams: string | BigNumber,
    _intVote: string | BigNumber,
    _contractToCall: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getContractToCall(
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  execute: {
    (
      _avatar: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      _contractToCall: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      _contractToCall: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      _contractToCall: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      _contractToCall: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeCall: {
    (
      _avatar: string | BigNumber,
      _callData: string,
      _value: number | BigNumber | string,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _callData: string,
      _value: number | BigNumber | string,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      _callData: string,
      _value: number | BigNumber | string,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _callData: string,
      _value: number | BigNumber | string,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface GenesisProtocolInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ]
  >;

  getParametersHash(
    _params: (number | BigNumber | string)[],
    _voteOnBehalf: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  threshold(
    _paramsHash: string | BigNumber,
    _organizationId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  proposals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ]
  >;

  calcExecuteCallBounty(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldBoost(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  stakesNonce(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  organizations(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  averagesDownstakesOfBoosted(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  orgBoostedProposalsCnt(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getNumberOfChoices(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getProposalTimes(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<(BigNumber)[]>;

  voteInfo(
    _proposalId: string | BigNumber,
    _voter: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  voteStatus(
    _proposalId: string | BigNumber,
    _choice: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isVotable(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  proposalStatus(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getProposalOrganization(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getStaker(
    _proposalId: string | BigNumber,
    _staker: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  voteStake(
    _proposalId: string | BigNumber,
    _vote: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  winningVote(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  state(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getAllowedRangeOfChoices(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  score(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  redeemDaoBounty: {
    (
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  propose: {
    (
      arg0: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeBoosted: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<(BigNumber)[]>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stake: {
    (
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakeWithSignature: {
    (
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _nonce: number | BigNumber | string,
      _signatureType: number | BigNumber | string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _nonce: number | BigNumber | string,
      _signatureType: number | BigNumber | string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _nonce: number | BigNumber | string,
      _signatureType: number | BigNumber | string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _nonce: number | BigNumber | string,
      _signatureType: number | BigNumber | string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  vote: {
    (
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelVote: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  execute: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  NO(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  proposalsCnt(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  DELEGATION_HASH_EIP712(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
  stakingToken(txDetails?: Truffle.TransactionDetails): Promise<string>;
  NUM_OF_CHOICES(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  YES(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  isAbstainAllow(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface GenesisProtocolCallbacksMockInstance
  extends Truffle.ContractInstance {
  proposalsBlockNumbers(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      arg3: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  propose: {
    (
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputationTest: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      arg2: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setProposal: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakingToken(txDetails?: Truffle.TransactionDetails): Promise<string>;
  genesisProtocol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  reputation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface GenesisProtocolLogicInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ]
  >;

  proposals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ]
  >;

  getAllowedRangeOfChoices(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getNumberOfChoices(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  voteStatus(
    _proposalId: string | BigNumber,
    _choice: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  organizations(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  averagesDownstakesOfBoosted(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isVotable(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  orgBoostedProposalsCnt(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calcExecuteCallBounty(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  shouldBoost(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  threshold(
    _paramsHash: string | BigNumber,
    _organizationId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getParametersHash(
    _params: (number | BigNumber | string)[],
    _voteOnBehalf: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  vote: {
    (
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _rep: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _rep: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _rep: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _rep: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelVote: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  propose: {
    (
      arg0: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeBoosted: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _params: (number | BigNumber | string)[],
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<(BigNumber)[]>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemDaoBounty: {
    (
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BigNumber, BigNumber]>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  NO(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  proposalsCnt(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  isAbstainAllow(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  stakingToken(txDetails?: Truffle.TransactionDetails): Promise<string>;
  NUM_OF_CHOICES(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  YES(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface GlobalConstraintInterfaceInstance
  extends Truffle.ContractInstance {
  pre: {
    (
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _method: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _method: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _method: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _method: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  post: {
    (
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _method: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _method: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _method: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _method: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  when: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface GlobalConstraintMockInstance extends Truffle.ContractInstance {
  testParams(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, boolean]>;

  pre(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    method: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  post(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    method: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setConstraint: {
    (
      method: string | BigNumber,
      pre: boolean,
      post: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      method: string | BigNumber,
      pre: boolean,
      post: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      method: string | BigNumber,
      pre: boolean,
      post: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      method: string | BigNumber,
      pre: boolean,
      post: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  currentCallPhase(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  when(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface GlobalConstraintRegistrarInstance
  extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  organizationsProposals(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean, string, string]>;

  proposalsInfo(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  voteToRemoveParams(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getParametersHash(
    _voteRegisterParams: string | BigNumber,
    _intVote: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _voteRegisterParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _voteRegisterParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _voteRegisterParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voteRegisterParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeGlobalConstraint: {
    (
      _avatar: string | BigNumber,
      _gc: string | BigNumber,
      _params: string | BigNumber,
      _voteToRemoveParams: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _gc: string | BigNumber,
      _params: string | BigNumber,
      _voteToRemoveParams: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      _gc: string | BigNumber,
      _params: string | BigNumber,
      _voteToRemoveParams: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _gc: string | BigNumber,
      _params: string | BigNumber,
      _voteToRemoveParams: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeToRemoveGC: {
    (
      _avatar: string | BigNumber,
      _gc: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _gc: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      _gc: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _gc: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IAssetsRegistriesRegistryInstance
  extends Truffle.ContractInstance {
  getAssetsRegistryAddress(
    _hashedAssetRegistryId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setAssetsRegistryAddress: {
    (
      _hashedAssetRegistryId: string | BigNumber,
      _assetRegistryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _hashedAssetRegistryId: string | BigNumber,
      _assetRegistryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _hashedAssetRegistryId: string | BigNumber,
      _assetRegistryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _hashedAssetRegistryId: string | BigNumber,
      _assetRegistryAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IERC20Instance extends Truffle.ContractInstance {
  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface IERC721Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721ReceiverInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      from: string | BigNumber,
      tokenId: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IntVoteInterfaceInstance extends Truffle.ContractInstance {
  getNumberOfChoices(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isVotable(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  voteStatus(
    _proposalId: string | BigNumber,
    _choice: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getAllowedRangeOfChoices(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  propose: {
    (
      _numOfChoices: number | BigNumber | string,
      _proposalParameters: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _numOfChoices: number | BigNumber | string,
      _proposalParameters: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _numOfChoices: number | BigNumber | string,
      _proposalParameters: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _numOfChoices: number | BigNumber | string,
      _proposalParameters: string | BigNumber,
      _proposer: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  vote: {
    (
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _rep: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _rep: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _rep: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _rep: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelVote: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAbstainAllow(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface IOwnedAssetInstance extends Truffle.ContractInstance {
  ownerOf(
    assetId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface Locking4ReputationInstance extends Truffle.ContractInstance {
  scores(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  lockers(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  redeem: {
    (
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemEnableTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  lockingStartTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalLocked(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  avatar(txDetails?: Truffle.TransactionDetails): Promise<string>;
  getAgreementHash(txDetails?: Truffle.TransactionDetails): Promise<string>;
  lockingEndTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationRewardLeft(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  maxLockingPeriod(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalScore(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  lockingsCounter(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalLockedLeft(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationReward(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface LockingEth4ReputationInstance
  extends Truffle.ContractInstance {
  scores(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  lockers(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  redeem: {
    (
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _lockingStartTime: number | BigNumber | string,
      _lockingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _maxLockingPeriod: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _lockingStartTime: number | BigNumber | string,
      _lockingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _maxLockingPeriod: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _lockingStartTime: number | BigNumber | string,
      _lockingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _maxLockingPeriod: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _lockingStartTime: number | BigNumber | string,
      _lockingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _maxLockingPeriod: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  release: {
    (
      _beneficiary: string | BigNumber,
      _lockingId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      _lockingId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      _lockingId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      _lockingId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lock: {
    (
      _period: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _period: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _period: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _period: number | BigNumber | string,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemEnableTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  lockingStartTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalLocked(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  avatar(txDetails?: Truffle.TransactionDetails): Promise<string>;
  getAgreementHash(txDetails?: Truffle.TransactionDetails): Promise<string>;
  lockingEndTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationRewardLeft(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  maxLockingPeriod(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalScore(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  lockingsCounter(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalLockedLeft(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationReward(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface LockingToken4ReputationInstance
  extends Truffle.ContractInstance {
  scores(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  lockers(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  lockedTokens(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  redeem: {
    (
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _lockingStartTime: number | BigNumber | string,
      _lockingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _maxLockingPeriod: number | BigNumber | string,
      _priceOracleContract: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _lockingStartTime: number | BigNumber | string,
      _lockingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _maxLockingPeriod: number | BigNumber | string,
      _priceOracleContract: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _lockingStartTime: number | BigNumber | string,
      _lockingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _maxLockingPeriod: number | BigNumber | string,
      _priceOracleContract: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _reputationReward: number | BigNumber | string,
      _lockingStartTime: number | BigNumber | string,
      _lockingEndTime: number | BigNumber | string,
      _redeemEnableTime: number | BigNumber | string,
      _maxLockingPeriod: number | BigNumber | string,
      _priceOracleContract: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  release: {
    (
      _beneficiary: string | BigNumber,
      _lockingId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      _lockingId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      _lockingId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      _lockingId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lock: {
    (
      _amount: number | BigNumber | string,
      _period: number | BigNumber | string,
      _token: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _period: number | BigNumber | string,
      _token: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _period: number | BigNumber | string,
      _token: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _period: number | BigNumber | string,
      _token: string | BigNumber,
      _agreementHash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemEnableTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  priceOracleContract(txDetails?: Truffle.TransactionDetails): Promise<string>;
  lockingStartTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalLocked(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  avatar(txDetails?: Truffle.TransactionDetails): Promise<string>;
  getAgreementHash(txDetails?: Truffle.TransactionDetails): Promise<string>;
  lockingEndTime(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationRewardLeft(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  maxLockingPeriod(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalScore(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  lockingsCounter(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalLockedLeft(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  reputationReward(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  setCompleted: {
    (
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgrade: {
    (
      newAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newAddress: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  lastCompletedMigration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface OrganizationRegisterInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string, string]>;

  organizationsRegistry(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getParametersHash(
    _token: string | BigNumber,
    _fee: number | BigNumber | string,
    _beneficiary: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setParameters: {
    (
      _token: string | BigNumber,
      _fee: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      _fee: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _token: string | BigNumber,
      _fee: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      _fee: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addOrPromoteAddress: {
    (
      _avatar: string | BigNumber,
      _record: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _record: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _record: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _record: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface OwnableInstance extends Truffle.ContractInstance {
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface PolkaCurveInstance extends Truffle.ContractInstance {
  calc(
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  SUM_OF_SQRTS(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  TOTAL_REPUTATION(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface PriceOracleInterfaceInstance extends Truffle.ContractInstance {
  getPrice(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;
}

export interface PriceOracleMockInstance extends Truffle.ContractInstance {
  tokenPrices(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getPrice(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTokenPrice: {
    (
      token: string | BigNumber,
      numerator: number | BigNumber | string,
      denominator: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      numerator: number | BigNumber | string,
      denominator: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      numerator: number | BigNumber | string,
      denominator: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      numerator: number | BigNumber | string,
      denominator: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface ProposalExecuteInterfaceInstance
  extends Truffle.ContractInstance {
  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _decision: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface QuorumVoteInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  voteInfo(
    _proposalId: string | BigNumber,
    _voter: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getParametersHash(
    _precReq: number | BigNumber | string,
    _voteOnBehalf: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  proposals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean, string, BigNumber, string, BigNumber]>;

  getAllowedRangeOfChoices(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  getNumberOfChoices(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  voteStatus(
    _proposalId: string | BigNumber,
    _choice: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  organizations(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isVotable(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setParameters: {
    (
      _precReq: number | BigNumber | string,
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _precReq: number | BigNumber | string,
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _precReq: number | BigNumber | string,
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _precReq: number | BigNumber | string,
      _voteOnBehalf: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  vote: {
    (
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _amount: number | BigNumber | string,
      _voter: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  propose: {
    (
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _numOfChoices: number | BigNumber | string,
      _paramsHash: string | BigNumber,
      arg2: string | BigNumber,
      _organization: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelVote: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  execute: {
    (
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposalsCnt(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  isAbstainAllow(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  MAX_NUM_OF_CHOICES(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface RealMathTesterInstance extends Truffle.ContractInstance {
  power(
    num: number | BigNumber | string,
    den: number | BigNumber | string,
    exp: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  fraction(
    num: number | BigNumber | string,
    den: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface RedeemerInstance extends Truffle.ContractInstance {
  redeem: {
    (
      _contributionReward: string | BigNumber,
      _genesisProtocol: string | BigNumber,
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _contributionReward: string | BigNumber,
      _genesisProtocol: string | BigNumber,
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      [
        (BigNumber)[],
        (BigNumber)[],
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;
    sendTransaction(
      _contributionReward: string | BigNumber,
      _genesisProtocol: string | BigNumber,
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contributionReward: string | BigNumber,
      _genesisProtocol: string | BigNumber,
      _proposalId: string | BigNumber,
      _avatar: string | BigNumber,
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface RepAllocationInstance extends Truffle.ContractInstance {
  reputationAllocations(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOf(
    _beneficiary: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addBeneficiary: {
    (
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addBeneficiaries: {
    (
      _beneficiaries: (string | BigNumber)[],
      _amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiaries: (string | BigNumber)[],
      _amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _beneficiaries: (string | BigNumber)[],
      _amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiaries: (string | BigNumber)[],
      _amounts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  freeze: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  isFreeze(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface ReputationInstance extends Truffle.ContractInstance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOfAt(
    _owner: string | BigNumber,
    _blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalSupplyAt(
    _blockNumber: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string | BigNumber,
      _amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ReputationFromTokenInstance extends Truffle.ContractInstance {
  redeems(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initialize: {
    (
      _avatar: string | BigNumber,
      _tokenContract: string | BigNumber,
      _curve: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _tokenContract: string | BigNumber,
      _curve: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _tokenContract: string | BigNumber,
      _curve: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _tokenContract: string | BigNumber,
      _curve: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tokenContract(txDetails?: Truffle.TransactionDetails): Promise<string>;
  avatar(txDetails?: Truffle.TransactionDetails): Promise<string>;
  curve(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface SafeERC20MockInstance extends Truffle.ContractInstance {
  transfer: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferWithFix: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFromWithFix: {
    (
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveWithFix: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface SchemeRegistrarInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, string]>;

  organizationsProposals(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean, string, string]>;

  proposalsInfo(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getParametersHash(
    _voteRegisterParams: string | BigNumber,
    _voteRemoveParams: string | BigNumber,
    _intVote: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _voteRegisterParams: string | BigNumber,
      _voteRemoveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _voteRegisterParams: string | BigNumber,
      _voteRemoveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _voteRegisterParams: string | BigNumber,
      _voteRemoveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voteRegisterParams: string | BigNumber,
      _voteRemoveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeScheme: {
    (
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _parametersHash: string | BigNumber,
      _permissions: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _parametersHash: string | BigNumber,
      _permissions: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _parametersHash: string | BigNumber,
      _permissions: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _parametersHash: string | BigNumber,
      _permissions: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeToRemoveScheme: {
    (
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface SignalSchemeInstance extends Truffle.ContractInstance {
  proposals(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean]>;

  proposalsInfo(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  params(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BigNumber, string]>;

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _avatar: string | BigNumber,
      _signalType: number | BigNumber | string,
      _voteApproveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _signalType: number | BigNumber | string,
      _voteApproveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      _signalType: number | BigNumber | string,
      _voteApproveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _signalType: number | BigNumber | string,
      _voteApproveParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeSignal: {
    (_descriptionHash: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface TestContractInstance extends Truffle.ContractInstance {
  randomFunctionWithArg(
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  randomFunction: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  testValue(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  revertingFunction(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface TokenCapGCInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  getParametersHash(
    _token: string | BigNumber,
    _cap: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  pre(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    arg2: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  post(
    arg0: string | BigNumber,
    _paramsHash: string | BigNumber,
    arg2: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setParameters: {
    (
      _token: string | BigNumber,
      _cap: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      _cap: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _token: string | BigNumber,
      _cap: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      _cap: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  when(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface UControllerInstance extends Truffle.ContractInstance {
  newControllers(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  organizations(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  actors(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isSchemeRegistered(
    _scheme: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getSchemeParameters(
    _scheme: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getSchemePermissions(
    _scheme: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getGlobalConstraintParameters(
    _globalConstraint: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  globalConstraintsCount(
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  isGlobalConstraintRegistered(
    _globalConstraint: string | BigNumber,
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getNativeReputation(
    _avatar: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  newOrganization: {
    (
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _from: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintTokens: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registerScheme: {
    (
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _scheme: string | BigNumber,
      _paramsHash: string | BigNumber,
      _permissions: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterScheme: {
    (
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _scheme: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterSelf: {
    (
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addGlobalConstraint: {
    (
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _globalConstraint: string | BigNumber,
      _params: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeGlobalConstraint: {
    (
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _globalConstraint: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeController: {
    (
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newController: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  genericCall: {
    (
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contract: string | BigNumber,
      _data: string,
      _avatar: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendEther: {
    (
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amountInWei: number | BigNumber | string,
      _to: string | BigNumber,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenTransfer: {
    (
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenTransferFrom: {
    (
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  externalTokenApproval: {
    (
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _externalToken: string | BigNumber,
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  metaData: {
    (
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _metaData: string,
      _avatar: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface UniversalSchemeMockInstance extends Truffle.ContractInstance {
  genericCall: {
    (
      _avatar: string | BigNumber,
      _contract: string | BigNumber,
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _contract: string | BigNumber,
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      _avatar: string | BigNumber,
      _contract: string | BigNumber,
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _contract: string | BigNumber,
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  genericCallDirect: {
    (
      _avatar: string | BigNumber,
      _contract: string | BigNumber,
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _contract: string | BigNumber,
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;
    sendTransaction(
      _avatar: string | BigNumber,
      _contract: string | BigNumber,
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _contract: string | BigNumber,
      _a: number | BigNumber | string,
      _b: string | BigNumber,
      _c: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface UpgradeSchemeInstance extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  organizationsProposals(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BigNumber]>;

  proposalsInfo(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getParametersHash(
    _voteParams: string | BigNumber,
    _intVote: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeUpgrade: {
    (
      _avatar: string | BigNumber,
      _newController: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _newController: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      _newController: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _newController: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeChangeUpgradingScheme: {
    (
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _scheme: string | BigNumber,
      _params: string | BigNumber,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface VoteInOrganizationSchemeInstance
  extends Truffle.ContractInstance {
  parameters(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  organizationsProposals(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BigNumber, boolean]>;

  proposalsInfo(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getParametersHash(
    _voteParams: string | BigNumber,
    _intVote: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeProposal: {
    (
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: string | BigNumber,
      _param: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voteParams: string | BigNumber,
      _intVote: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeVote: {
    (
      _avatar: string | BigNumber,
      _originalIntVote: string | BigNumber,
      _originalProposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _avatar: string | BigNumber,
      _originalIntVote: string | BigNumber,
      _originalProposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _avatar: string | BigNumber,
      _originalIntVote: string | BigNumber,
      _originalProposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _avatar: string | BigNumber,
      _originalIntVote: string | BigNumber,
      _originalProposalId: string | BigNumber,
      _vote: number | BigNumber | string,
      _descriptionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface VotingMachineCallbacksInstance
  extends Truffle.ContractInstance {
  proposalsInfo(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface VotingMachineCallbacksInterfaceInstance
  extends Truffle.ContractInstance {
  getTotalReputationSupply(
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  reputationOf(
    _owner: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOfStakingToken(
    _stakingToken: string | BigNumber,
    _proposalId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  mintReputation: {
    (
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _beneficiary: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnReputation: {
    (
      _amount: number | BigNumber | string,
      _owner: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _amount: number | BigNumber | string,
      _owner: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BigNumber | string,
      _owner: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BigNumber | string,
      _owner: string | BigNumber,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakingTokenTransfer: {
    (
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakingToken: string | BigNumber,
      _beneficiary: string | BigNumber,
      _amount: number | BigNumber | string,
      _proposalId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface WalletInstance extends Truffle.ContractInstance {
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pay: {
    (
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface WizardGuildInstance extends Truffle.ContractInstance {
  getApproved(
    wizardId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  wizardsById(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, string, string]>;

  ownerOf(
    wizardId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getWizard(
    id: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber, BigNumber, string]>;

  isApprovedOrOwner(
    spender: string | BigNumber,
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifySignature(
    wizardId: number | BigNumber | string,
    hash: string | BigNumber,
    sig: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  verifySignatures(
    wizardId1: number | BigNumber | string,
    wizardId2: number | BigNumber | string,
    hash1: string | BigNumber,
    hash2: string | BigNumber,
    sig1: string,
    sig2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  approve: {
    (
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCfo: {
    (
      newCfo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newCfo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newCfo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newCfo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCeo: {
    (
      newCeo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newCeo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newCeo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newCeo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoo: {
    (
      newCoo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newCoo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newCoo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newCoo: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  openSeries: {
    (
      minter: string | BigNumber,
      reservedIds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      minter: string | BigNumber,
      reservedIds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      minter: string | BigNumber,
      reservedIds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      minter: string | BigNumber,
      reservedIds: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  closeSeries: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  mintWizards: {
    (
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<(BigNumber)[]>;
    sendTransaction(
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReservedWizards: {
    (
      wizardIds: (number | BigNumber | string)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      wizardIds: (number | BigNumber | string)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      wizardIds: (number | BigNumber | string)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      wizardIds: (number | BigNumber | string)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMetadata: {
    (
      wizardIds: (number | BigNumber | string)[],
      metadata: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      wizardIds: (number | BigNumber | string)[],
      metadata: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      wizardIds: (number | BigNumber | string)[],
      metadata: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      wizardIds: (number | BigNumber | string)[],
      metadata: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAffinity: {
    (
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cfoAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
  ceoAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
  cooAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
  getNextWizardIndex(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface WizardGuildInterfaceInstance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getWizard(
    id: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber, BigNumber, string]>;

  isApprovedOrOwner(
    spender: string | BigNumber,
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifySignature(
    wizardId: number | BigNumber | string,
    hash: string | BigNumber,
    sig: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  verifySignatures(
    wizardId1: number | BigNumber | string,
    wizardId2: number | BigNumber | string,
    hash1: string | BigNumber,
    hash2: string | BigNumber,
    sig1: string,
    sig2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BigNumber,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAffinity: {
    (
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintWizards: {
    (
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<(BigNumber)[]>;
    sendTransaction(
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintReservedWizards: {
    (
      wizardIds: (number | BigNumber | string)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      wizardIds: (number | BigNumber | string)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      wizardIds: (number | BigNumber | string)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      wizardIds: (number | BigNumber | string)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      owner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMetadata: {
    (
      wizardIds: (number | BigNumber | string)[],
      metadata: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      wizardIds: (number | BigNumber | string)[],
      metadata: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      wizardIds: (number | BigNumber | string)[],
      metadata: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      wizardIds: (number | BigNumber | string)[],
      metadata: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface WizardNFTInstance extends Truffle.ContractInstance {
  wizardsById(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, string, string]>;

  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ownerOf(
    wizardId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getApproved(
    wizardId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approve: {
    (
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      wizardId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface WizardPresaleInstance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _wizardsById(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, string]>;

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getWizard(
    id: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber, BigNumber]>;

  costToPower(
    cost: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  powerToCost(
    power: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setGatekeeper: {
    (gc: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      gc: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      gc: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      gc: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  postponeSale: {
    (
      newStart: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newStart: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newStart: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newStart: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  absorbWizard: {
    (
      id: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BigNumber, BigNumber]>;
    sendTransaction(
      id: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  absorbWizardMulti: {
    (
      ids: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      ids: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<[(string)[], (BigNumber)[], (BigNumber)[]]>;
    sendTransaction(
      ids: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ids: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  conjureExclusiveWizard: {
    (
      id: number | BigNumber | string,
      owner: string | BigNumber,
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      owner: string | BigNumber,
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      owner: string | BigNumber,
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      owner: string | BigNumber,
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeConjureExclusiveWizard: {
    (
      id: number | BigNumber | string,
      owner: string | BigNumber,
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      owner: string | BigNumber,
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      owner: string | BigNumber,
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      owner: string | BigNumber,
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  conjureExclusiveWizardMulti: {
    (
      ids: (number | BigNumber | string)[],
      owners: (string | BigNumber)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      ids: (number | BigNumber | string)[],
      owners: (string | BigNumber)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      ids: (number | BigNumber | string)[],
      owners: (string | BigNumber)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ids: (number | BigNumber | string)[],
      owners: (string | BigNumber)[],
      powers: (number | BigNumber | string)[],
      affinities: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAffinity: {
    (
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      wizardId: number | BigNumber | string,
      newAffinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  conjureWizard: {
    (
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      affinity: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  conjureWizardMulti: {
    (
      affinities: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      affinities: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<(BigNumber)[]>;
    sendTransaction(
      affinities: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      affinities: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  destroy: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  saleStartBlock(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  elementalWizardIncrement(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  saleDuration(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  guildmaster(txDetails?: Truffle.TransactionDetails): Promise<string>;
  neutralWizardCost(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  _INTERFACE_ID_WIZARDPRESALE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
  maxExclusives(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  gatekeeper(txDetails?: Truffle.TransactionDetails): Promise<string>;
  nextWizardId(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  elementalWizardCost(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  isDuringSale(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface WizardPresaleInterfaceInstance
  extends Truffle.ContractInstance {
  powerToCost(
    power: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  costToPower(
    cost: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  absorbWizard: {
    (
      id: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BigNumber, BigNumber]>;
    sendTransaction(
      id: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  absorbWizardMulti: {
    (
      ids: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      ids: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<[(string)[], (BigNumber)[], (BigNumber)[]]>;
    sendTransaction(
      ids: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ids: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _INTERFACE_ID_WIZARDPRESALE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface WizardPresaleNFTInstance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  _wizardsById(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, string]>;

  balanceOf(
    owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  ownerOf(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getApproved(
    tokenId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BigNumber,
    operator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approve: {
    (
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      tokenId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}
